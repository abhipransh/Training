1. Create an array
	There are many ways to create or initialize an array.
	1. names = Array.new
		using the new class method		
		
		3.2.2 :001 > names = Array.new
 		=> [] 

	2. names = Array.new(20)
		set the size of array at the time of creation with value = nil
		
		3.2.2 :002 > names = Array.new(20)
		 => 
		[nil,                                                      
		... 
	
	3. names = Array.new(4, "mac")
		creates an array with predefined size i.e. 4 and a value assigned to each element i.e. "mac"
		
		3.2.2 :006 > names = Array.new(4, "mac")
		 => ["mac", "mac", "mac", "mac"] 
	
	4. nums = Array.new(10) { |e| e = e * 2 }
		Populates each element with what the block evaluates to
		
		3.2.2 :008 > nums = Array.new(10) {|e| e *= 2}
		 => [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 
	
	5. nums = Array.[](1, 2, 3, 4, 5)
		initialises the array with the given values

		3.2.2 :010 > nums = Array.[](1, 2, 3, 4, 5)
		 => [1, 2, 3, 4, 5]

	6. nums = Array[1, 2, 3, 4, 5]	
		can also be initialised like this

		3.2.2 :011 > nums = Array[1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 

	7. digits = Array(0..9)
		initialise an array by giving a range of arguments
	
		3.2.2 :012 > digits = Array(0..9)
		 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]	


2. Public array methods (assuming array is an array object)  

	1. array & other_array
		Returns a new array containing elements common to the two arrays, with no duplicates.
		
		3.2.2 :011 > nums = Array[1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 
		3.2.2 :012 > digits = Array(0..9)
		 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :013 > nums & digits
		 => [1, 2, 3, 4, 5] 

	2. array * int [or] array * str
		Returns a new array built by concatenating the int copies of self. With a String argument, equivalent to self.join(str).
		
		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5] 
		3.2.2 :009 > nums*3
		 => [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 

		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"] 
		3.2.2 :012 > names*3
		 => ["Hi", "Hello", "Hi", "Hello", "Hi", "Hello"] 

	3. array + other_array
		Returns a new array built by concatenating the two arrays together to produce a third array.

		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5]
		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"]
		3.2.2 :013 > names + nums
		 => ["Hi", "Hello", 1, 2, 3, 4, 5] 

	4. array - other_array
		Returns a new array that is a copy of the original array, removing any items that also appear in other_array.
		
		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5]
		3.2.2 :014 > digits = Array(3..7)
		 => [3, 4, 5, 6, 7] 
		3.2.2 :015 > nums - digits
		 => [1, 2] 
		
	5. array <=> other_array
		Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than). The comparison is casesensitive.

		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"]
		3.2.2 :018 > strings = Array(["Hi", "Hello"])  
		 => ["Hi", "Hello"] 
		3.2.2 :019 > strings <=> names
		 => 0 
		3.2.2 :020 > strings = Array(["Hi", "hello"])  
		 => ["Hi", "hello"] 
		3.2.2 :021 > strings <=> names
		 => 1 
		3.2.2 :022 > strings = Array(["HI", "HELLO"])  
		 => ["HI", "HELLO"] 
		3.2.2 :023 > strings <=> names
		 => -1 

	6. array | other_array
		Returns a new array by joining array with other_array, removing duplicates.

		3.2.2 :024 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :025 > digits
		 => [3, 4, 5, 6, 7] 
		3.2.2 :026 > nums | digits
		 => [1, 2, 3, 4, 5, 6, 7] 

	7. array << obj
		Pushes the given object onto the end of array. This expression returns the array itself, so several appends may be chained together.

		3.2.2 :024 > nums
		 => [1, 2, 3, 4, 5]
		3.2.2 :027 > nums << 8
		 => [1, 2, 3, 4, 5, 8] 

		3.2.2 :030 > nums << 8 << 9 << 10 << 11
		 => [1, 2, 3, 4, 5, 8, 8, 9, 10, 11] 

	8. array <=> other_array
		Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than). The comparison is casesensitive.

		3.2.2 :032 > nums
		 => [1, 2, 3, 4, 5, 8, 8, 9, 10, 11] 
		3.2.2 :033 > digits
		 => [3, 4, 5, 6, 7] 
		3.2.2 :034 > nums <=> digits
		 => -1 
		
		3.2.2 :040 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :041 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :042 > nums <=> digits
		 => 0 
		
		3.2.2 :045 > nums
		 => [2, 3, 4, 5, 6] 
		3.2.2 :046 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :047 > nums <=> digits
		 => 1 

	9. array == other_array
		Two arrays are equal if they contain the same number of elements and if each element is equal to (according to Object.==) the corresponding element in the other array.

		3.2.2 :049 > nums == digits
		 => false 
		3.2.2 :050 > nums = [1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 
		3.2.2 :051 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :052 > nums == digits
		 => true 

	10. array[index] [or] array[start, length] [or] array[range] [or] array.slice(index) [or] array.slice(start, length) [or] array.slice(range)
		Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. 
		Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) is out of range.

		3.2.2 :054 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :055 > nums[2]
		 => 3 

		3.2.2 :056 > nums[0, 3]
		 => [1, 2, 3] 
		
		3.2.2 :057 > nums[1..3]
		 => [2, 3, 4] 
		3.2.2 :058 > nums[1...3]
		 => [2, 3]

		3.2.2 :059 > nums.slice(2)
		 => 3 
		3.2.2 :061 > nums.slice(3)
		 => 4 
		3.2.2 :062 > nums
		 => [1, 2, 3, 4, 5] 

		3.2.2 :063 > nums.slice(1, 3)
		 => [2, 3, 4] 

		3.2.2 :064 > nums.slice(1..4)
		 => [2, 3, 4, 5] 

	11. array[index] = obj [or] array[start, length] = obj or an_array or nil [or] array[range] = obj or an_array or nil
		Sets the element at index, or replaces a subarray starting at start and continuing for length elements, or replaces a subarray specified by range. 
		If indices are greater than the current capacity of the array, the array grows automatically. Negative indices will count backward from the end of the array. 
		Inserts elements if length is zero. If nil is used in the second and third form, deletes elements from self.

		3.2.2 :065 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :066 > nums[3] = 5
		 => 5 
		3.2.2 :067 > nums
		 => [1, 2, 3, 5, 5] 
		
		3.2.2 :068 > nums[1, 3] = 2
		 => 2 
		3.2.2 :069 > nums
		 => [1, 2, 5] 
		3.2.2 :070 > nums[0, 2] = [1, 2, 3]
		 => [1, 2, 3] 
		3.2.2 :071 > nums
		 => [1, 2, 3, 5] 
		3.2.2 :072 > nums[1, 3] = nil
		 => nil 
		3.2.2 :073 > nums
		 => [1, nil] 

		3.2.2 :075 > nums = [1, 2, 3, 4, 5]
		3.2.2 :076 > nums[1..3] = 4
		 => 4 
		3.2.2 :077 > nums
		 => [1, 4, 5] 
		3.2.2 :078 > nums[0, 2] = [1, 2, 3, 4]
		 => [1, 2, 3, 4] 
		3.2.2 :079 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :080 > nums[0..3] = nil
		 => nil 
		3.2.2 :081 > nums
		 => [nil, 5] 

	12. array.abbrev(pattern = nil) 
		Calculates the set of unambiguous abbreviations for the strings in self. 
		If passed a pattern or a string, only the strings matching the pattern or starting with the string are considered.
		
		3.2.2 :084 > names
		 => ["Hi", "Hello"] 
		3.2.2 :085 > require 'abbrev'
		 => true 
		3.2.2 :086 > names.abbrev
		 => {"Hi"=>"Hi", "Hello"=>"Hello", "Hell"=>"Hello", "Hel"=>"Hello", "He"=>"Hello"}  

		3.2.2 :089 > names.abbrev(pattern = "He")
		 => {"Hello"=>"Hello", "Hell"=>"Hello", "Hel"=>"Hello", "He"=>"Hello"} 

	13. array.assoc(obj)
		Searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==. 
		Returns the first contained array that matches or nil if no match is found.
		
		3.2.2 :097 > nums = [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		 => [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		3.2.2 :098 > nums.assoc(9)
		 => [9, 7, 5, 4, 6, 8]
		3.2.2 :099 > nums.assoc(3)
		 => nil 

	14. array.at(index)
		Returns the element at index. A negative index counts from the end of self. Returns nil if the index is out of range.

		3.2.2 :100 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :101 > digits.at(4)
		 => 5 

	15. array.clear
		Removes all elements from array.
		
		3.2.2 :102 > nums
		 => [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		3.2.2 :103 > nums.clear
		 => [] 
		3.2.2 :104 > nums
		 => [] 

	16. array.collect { |item| block } [or] array.map { |item| block }
		Invokes block once for each element of self. Creates a new array containing the values returned by the block.

		3.2.2 :107 > nums
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :108 > numbers = nums.collect {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :109 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 

		3.2.2 :110 > numbers = nums.map {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18]
		3.2.2 :111 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 

	17. array.collect! { |item| block } [or] array.map! { |item| block }
		Invokes block once for each element of self, replacing the element with the value returned by block.

		3.2.2 :113 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :114 > numbers.collect! {|item| item = item / 2}
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :115 > numbers
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		
		3.2.2 :115 > numbers
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :117 > numbers.map! {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18]

	18. array.compact
		Returns a copy of self with all nil elements removed.

		3.2.2 :122 > nums
		 => [1, 2, nil, 7, 8, nil] 
		3.2.2 :123 > nums.compact
		 => [1, 2, 7, 8]
		3.2.2 :124 > nums
		 => [1, 2, nil, 7, 8, nil]  

	19. array.compact!
		Removes nil elements from array. Returns nil if no changes were made.

		3.2.2 :124 > nums
		 => [1, 2, nil, 7, 8, nil] 
		3.2.2 :125 > nums.compact!
		 => [1, 2, 7, 8] 
		3.2.2 :126 > nums
		 => [1, 2, 7, 8] 

	20. array.concat(other_array)
		Appends the elements in other_array to self.

		3.2.2 :128 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :129 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :130 > numbers.concat(digits)
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

	21. array.delete(obj) [or] array.delete(obj) { block }
		Deletes items from self that are equal to obj. If the item is not found, returns nil. If the optional code block is given, returns the result of block if the item is not found.

		3.2.2 :131 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :132 > numbers.delete(8)
		 => 8 
		3.2.2 :133 > numbers
		 => [2, 4, 6, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

		3.2.2 :134 > numbers.delete(0)
		 => nil 

		3.2.2 :137 > numbers.delete(54) {|item| item/2}
		 => 27 
	
	22. array.delete_at(index)
		Deletes the element at the specified index, returning that element, or nil if the index is out of range.

		3.2.2 :138 > numbers
		 => [2, 4, 6, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :140 > numbers.delete_at(3)
		 => 10 
		3.2.2 :141 > numbers
		 => [2, 4, 6, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

	23. array.delete_if { |item| block }
		Deletes every element of self for which block evaluates to true.
		
		3.2.2 :141 > numbers
		 => [2, 4, 6, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :142 > numbers.delete_if {|item| item % 2 == 0}
		 => [1, 3, 5] 
		
	24. array.each { |item| block }
		Calls block once for each element in self, passing that element as a parameter.
		
		3.2.2 :150 > numbers
		 => [1, 3, 5] 
		3.2.2 :151 > numbers.each {|item| puts item}
		1
		3                                                                    
		5                                                                    
		 => [1, 3, 5]  

	25. array.each_index { |index| block }
		Same as Array#each, but passes the index of the element instead of the element itself.

		3.2.2 :152 > numbers
		 => [1, 3, 5] 
		3.2.2 :153 > numbers.each_index {|index| puts numbers[index]}
		1
		3                                                                        
		5                                                                        
		 => [1, 3, 5] 

	26. array.empty?
		Returns true if the self array contains no elements.

		3.2.2 :154 > numbers.empty?
		 => false 
		3.2.2 :155 > numbers.clear
		 => [] 
		3.2.2 :156 > numbers.empty?
		 => true 

	27. array.eql?(other)
		Returns true if array and other are the same object, or are both arrays with the same content.

		3.2.2 :157 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :158 > numbers
		 => [] 
		3.2.2 :159 > nums.eql?(numbers)
		 => false 
		3.2.2 :160 > numbers = [1, 2, 7, 8]
		 => [1, 2, 7, 8] 
		3.2.2 :161 > nums.eql?(numbers)
		 => true 
	
	28. array.fetch(index) [or] array.fetch(index, default) [or] array.fetch(index) { |index| block }
		Tries to return the element at position index. If index lies outside the array, the first form throws an IndexError exception, 
		the second form returns default, and the third form returns the value of invoking block, passing in index. Negative values of index count from the end of the array.

		3.2.2 :164 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :165 > nums.fetch(2)
		 => 7 

		3.2.2 :166 > nums.fetch(5)
		(irb):166:in `fetch': index 5 outside of array bounds: -4...4 (IndexError)
		        from (irb):166:in `<main>'                
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'               
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>'

		3.2.2 :167 > nums.fetch(5, 2)
		 => 2 

		3.2.2 :168 > nums.fetch(5) {|index| index*2}
		 => 10 

	29. array.fill(obj) [or] array.fill(obj, start [, length]) [or] array.fill(obj, range) [or] array.fill { |index| block } [or] array.fill(start [, length] ) { |index| block } 
	    [or] array.fill(range) { |index| block }
		The first three forms set the selected elements of self to obj. A start of nil is equivalent to zero. A length of nil is equivalent to self.length. 
		The last three forms fill the array with the value of the block. The block is passed with the absolute index of each element to be filled.

		3.2.2 :169 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :170 > nums.fill(3)
		 => [3, 3, 3, 3] 
		3.2.2 :171 > nums
		 => [3, 3, 3, 3] 

		3.2.2 :173 > nums
		 => [3, 3, 3, 3] 
		3.2.2 :174 > nums.fill(4, 1, 2)
		 => [3, 4, 4, 3] 

		3.2.2 :175 > nums.fill(5, 1..3)
		 => [3, 5, 5, 5] 

		3.2.2 :176 > nums.fill {|index| nums[index] += nums[index-1]}
		 => [8, 13, 18, 23] 

		3.2.2 :177 > nums.fill(2) {|index| nums[index] -= nums[index-1]}
		 => [8, 13, 5, 18]

		3.2.2 :178 > nums.fill(1..3) {|index| nums[index] = nums[index]*2}
		 => [8, 26, 10, 36]

	30. array.first [or] array.first(n)
		Returns the first element, or the first n elements, of the array. If the array is empty, the first form returns nil, and the second form returns an empty array.

		3.2.2 :179 > nums
		 => [8, 26, 10, 36] 
		3.2.2 :180 > nums.first
		 => 8 
		3.2.2 :181 > nums.first(3)
		 => [8, 26, 10] 

	31. array.flatten
		Returns a new array that is a one-dimensional flattening of this array (recursively).	

		3.2.2 :185 > nums = [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21]
		 => [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21] 
		3.2.2 :186 > nums.flatten
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 : 187 > nums
		 => [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21] 

	32. array.flatten!
		Flattens array in place. Returns nil if no modifications were made. (array contains no subarrays.)
		
		3.2.2 :188 > nums.flatten!
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :189 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21]
	
	33. array.frozen?
		Returns true if array is frozen (or temporarily frozen while being sorted).

		3.2.2 :190 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :191 > nums.frozen?
		 => false

	34. array.hash
		Computes a hash-code for array. Two arrays with the same content will have the same hash code.
		
		3.2.2 :193 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :194 > nums.hash
		 => -1814573711083090795 

	35. array.include?(obj)
		Returns true if obj is present in self, false otherwise.
		
		3.2.2 :196 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :197 > nums.include?(21)
		 => true 
		3.2.2 :198 > nums.include?(41)
		 => false 
	
	36. array.index(obj)
		Returns the index of the first object in self that is == to obj. Returns nil if no match is found.

		3.2.2 :202 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :203 > nums.index(12)
		 => 2 

	37. array.indexes(i1, i2, ... iN)
		This methods is deprecated in latest version of Ruby so please use Array#values_at.

		3.2.2 :204 > nums.indexes(1, 2, 3)
		(irb):204:in `<main>': undefined method `indexes' for [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12]:Array (NoMethodError)                                  
		Did you mean?  index                                                   
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'                                    
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'   
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>' 

	38. array.indices(i1, i2, ... iN)
		This methods is deprecated in latest version of Ruby so please use Array#values_at.

		3.2.2 :205 > nums.indices(1, 2, 3)
		(irb):205:in `<main>': undefined method `indices' for [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12]:Array (NoMethodError)
		Did you mean?  index                                                   
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'   
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>' 

	39. array.insert(index, obj...)
		Inserts the given values before the element with the given index (which may be negative).

		3.2.2 :206 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :207 > nums.insert(1, 23)
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :208 > nums.insert(-2, 31)
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 

	40. array.inspect
		Creates a printable version of array.

		3.2.2 :209 > nums.inspect
		 => "[1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12]" 

	41. array.join(sep = $,)
		Returns a string created by converting each element of the array to a string, separated by sep.

		3.2.2 :210 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :211 > nums.join(sep = $,)
		 => "123321243211354213112" 
		3.2.2 :212 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :213 > nums.join(sep = " ",)
		 => "1 23 32 12 4 3 2 1 1 3 54 21 31 12"

	42. array.last [or] array.last(n)
		Returns the last element(s) of self. If array is empty, the first form returns nil.

		3.2.2 :214 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :215 > nums.last
		 => 12 
		3.2.2 :216 > nums.last(5)
		 => [3, 54, 21, 31, 12] 
	43. array.length
		Returns the number of elements in self. May be zero.

		3.2.2 :217 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :218 > nums.length
		 => 14 

	44. array.map { |item| block } [or] array.collect { |item| block }
		Invokes block once for each element of self. Creates a new array containing the values returned by the block.

		3.2.2 :219 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :220 > nums.map {|item| item *= 2}
		 => [2, 46, 64, 24, 8, 6, 4, 2, 2, 6, 108, 42, 62, 24]

		3.2.2 :221 > nums.collect {|item| item *= 3}
		 => [3, 69, 96, 36, 12, 9, 6, 3, 3, 9, 162, 63, 93, 36] 

	45. array.map! { |item| block } [or] array.collect! { |item| block }
		Invokes block once for each element of array, replacing the element with the value returned by block.

		3.2.2 :222 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :223 > nums.map! {|item| item *= 2}
		 => [2, 46, 64, 24, 8, 6, 4, 2, 2, 6, 108, 42, 62, 24] 
		3.2.2 :224 > nums.collect! {|item| item /= 2}
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :225 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12]

	46. array.pop
		Removes the last element from array and returns it, or nil if array is empty.

		3.2.2 :237 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12] 
		3.2.2 :238 > nums.pop
		 => 12 

	47. array.push(obj, ...)
		Pushes (appends) the given obj onto the end of this array. This expression returns the array itself, so several appends may be chained together.

		3.2.2 :239 > nums
		 => [1, 23, nil, 3, nil, 21, 31] 
		3.2.2 :240 > nums.push(12, 13, 14)
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 

	48. array.rassoc(key)
		Searches through the array whose elements are also arrays. Compares key with the second element of each contained array using ==. Returns the first contained array that matches.

		3.2.2 :245 > num = [[1, 3, 4, 5], [3, 2, 1, 4], [4, 3, 6, 5], [5, 6, 3, 7]]
		 => [[1, 3, 4, 5], [3, 2, 1, 4], [4, 3, 6, 5], [5, 6, 3, 7]] 
		3.2.2 :246 > num.rassoc(3)
		 => [1, 3, 4, 5] 

	49. array.reject { |item| block }
		Returns a new array containing the items array for which the block is not true.

		3.2.2 :247 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 
		3.2.2 :248 > nums.reject {|item| item == nil}
		 => [1, 23, 3, 21, 31, 12, 13, 14] 

	50. array.reject! { |item| block }
		Deletes elements from array for which the block evaluates to true, but returns nil if no changes were made. Equivalent to Array#delete_if.

		3.2.2 :249 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 
		3.2.2 :250 > nums.reject! {|item| item == nil}
		 => [1, 23, 3, 21, 31, 12, 13, 14] 
		3.2.2 :251 > nums
		 => [1, 23, 3, 21, 31, 12, 13, 14] 

	51. array.replace(other_array)
		Replaces the contents of array with the contents of other_array, truncating or expanding if necessary.
		
		3.2.2 :003 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5] 
		3.2.2 :004 > digits = Array(8..12)
		 => [8, 9, 10, 11, 12] 
		3.2.2 :005 > nums.replace(digits)
		 => [8, 9, 10, 11, 12] 
		3.2.2 :006 > nums
		 => [8, 9, 10, 11, 12] 

	52. array.reverse
		Returns a new array containing array's elements in reverse order.

		3.2.2 :007 > nums
		 => [8, 9, 10, 11, 12] 
		3.2.2 :008 > nums.reverse
		 => [12, 11, 10, 9, 8] 
		3.2.2 :009 > nums
		 => [8, 9, 10, 11, 12] 

	53. array.reverse!
		Reverses array in place.

		3.2.2 :010 > nums
		 => [8, 9, 10, 11, 12] 
		3.2.2 :011 > nums.reverse!
		 => [12, 11, 10, 9, 8] 
		3.2.2 :012 > nums
		 => [12, 11, 10, 9, 8] 

	54. array.reverse_each {|item| block }
		Same as Array#each, but traverses array in reverse order.
		
		3.2.2 :013 > digits
		 => [8, 9, 10, 11, 12] 
		3.2.2 :014 > digits.reverse_each {|item| puts item}
		12
		11                                                                          
		10                                                                          
		9                                                                           
		8                                                                           
		 => [8, 9, 10, 11, 12]  
	
	55. array.rindex(obj)
		Returns the index of the last object in array == to obj. Returns nil if no match is found.
		
		3.2.2 :015 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :016 > nums.rindex(9)
		 => 3 

	56. array.select {|item| block }
		Invokes the block passing in successive elements from array, returning an array containing those elements for which the block returns a true value.

		3.2.2 :017 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :018 > nums.select {|item| item%2==0}
		 => [12, 10, 8] 


	57. array.shift
		Returns the first element of self and removes it (shifting all other elements down by one). Returns nil if the array is empty.

		3.2.2 :019 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :020 > nums.shift
		 => 12 
		3.2.2 :021 > nums
		 => [11, 10, 9, 8] 

	58. array.size
		Returns the length of array (number of elements). Alias for length.
		
		3.2.2 :022 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :023 > nums.size
		 => 4 

	59. array.slice(index) [or] array.slice(start, length) [or] array.slice(range) [or] array[index] [or] array[start, length] [or] array[range]

		Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. 
		Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) are out of range.

		3.2.2 :024 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :025 > nums.slice(2)
		 => 9 
		3.2.2 :026 > nums.slice(1, 3)
		 => [10, 9, 8] 
		3.2.2 :027 > nums.slice(1..3)
		 => [10, 9, 8] 
		3.2.2 :028 > nums[3]
		 => 8 
		3.2.2 :029 > nums[1, 2]
		 => [10, 9] 
		3.2.2 :030 > nums[1..3]
		 => [10, 9, 8] 

	60. array.slice!(index) [or] array.slice!(start, length) [or] array.slice!(range)
		Deletes the element(s) given by an index (optionally with a length) or by a range. Returns the deleted object, subarray, or nil if index is out of range.

		3.2.2 :031 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :032 > nums.slice!(3)
		 => 8 
		3.2.2 :033 > nums
		 => [11, 10, 9] 
		3.2.2 :034 > nums.slice!(0, 2)
		 => [11, 10] 
		3.2.2 :035 > nums
		 => [9] 
		3.2.2 :036 > nums << 4 << 5 << 8
		 => [9, 4, 5, 8] 
		3.2.2 :037 > nums.slice!(0..3)
		 => [9, 4, 5, 8] 
		3.2.2 :038 > nums
		 => [] 

	61. array.sort [or] array.sort { | a,b | block }
		Returns a new array created by sorting self.

		3.2.2 :042 > nums
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
		3.2.2 :043 > nums.sort
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

	62. array.sort_by {|str| block}
		Returns a new array by sorting self according to given block.		

		3.2.2 :061 > strings = ["ab", "bar", "zoo", "igloo", "koo"]
		 => ["ab", "bar", "zoo", "igloo", "koo"] 
		3.2.2 :064 > strings.sort_by {|s| s.length}
		 => ["ab", "bar", "zoo", "koo", "igloo"] 
	
	63. array.sort! [or] array.sort! { | a,b | block }
		Sorts self in place.

		3.2.2 :071 > nums
		 => [2, 3, 4, 5, 5, 3, 7, 8, 9, 10, 5] 
		3.2.2 :072 > nums.sort!
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :073 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10]

	64. array.to_a
		Returns self. If called on a subclass of Array, converts the receiver to an Array object.

		3.2.2 :091 > b = nums.to_a
	 	=> [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :092 > b
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 


	65. array.to_ary
		Returns self.
		
		3.2.2 :080 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :081 > nums.to_ary
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 


	66. array.to_s
		Returns self.join.

		3.2.2 :077 > a
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :079 > a.to_s
		 => "[2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10]" 

	67. array.transpose
		Assumes that self is an array of arrays and transposes the rows and columns.

		3.2.2 :093 > matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
		 => [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 
		3.2.2 :094 > matrix.transpose
		 => [[1, 4, 7], [2, 5, 8], [3, 6, 9]] 

	68. array.uniq
		Returns a new array by removing duplicate values in array.

		3.2.2 :095 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :096 > nums.uniq
		 => [2, 3, 4, 5, 7, 8, 9, 10] 
	
	69. array.uniq!
		Removes duplicate elements from self. Returns nil if no changes are made (that is, no duplicates are found).

		3.2.2 :097 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :098 > nums.uniq!
		 => [2, 3, 4, 5, 7, 8, 9, 10] 

	70. array.unshift(obj, ...)
		Prepends objects to the front of array, other elements up one.

		3.2.2 :099 > nums
		 => [2, 3, 4, 5, 7, 8, 9, 10] 
		3.2.2 :100 > nums.unshift(4)
		 => [4, 2, 3, 4, 5, 7, 8, 9, 10] 

	71. array.values_at(selector,...)
		Returns an array containing the elements in self corresponding to the given selector (one or more). The selectors may be either integer indices or ranges.

		3.2.2 :101 > nums.values_at(3)
		 => [4] 
		3.2.2 :102 > nums.values_at(3..6)
		 => [4, 5, 7, 8] 
		
	72. array.zip(arg, ...) [or] array.zip(arg, ...){ | arr | block }
		Converts any arguments to arrays, then merges elements of array with corresponding elements from each argument.

		3.2.2 :107 > a = [1, 2, 3, 4]
		 => [1, 2, 3, 4] 
		3.2.2 :108 > b = [5, 6, 7, 8]
		 => [5, 6, 7, 8] 
		3.2.2 :109 > c = [9, 10, 11, 12]
		 => [9, 10, 11, 12] 
		3.2.2 :110 > a.zip(b, c)
		 => [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] 
