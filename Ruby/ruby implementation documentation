1. Create an array
	There are many ways to create or initialize an array.
	1. names = Array.new
		using the new class method		
		
		3.2.2 :001 > names = Array.new
 		=> [] 

	2. names = Array.new(20)
		set the size of array at the time of creation with value = nil
		
		3.2.2 :002 > names = Array.new(20)
		 => 
		[nil,                                                      
		... 
	
	3. names = Array.new(4, "mac")
		creates an array with predefined size i.e. 4 and a value assigned to each element i.e. "mac"
		
		3.2.2 :006 > names = Array.new(4, "mac")
		 => ["mac", "mac", "mac", "mac"] 
	
	4. nums = Array.new(10) { |e| e = e * 2 }
		Populates each element with what the block evaluates to
		
		3.2.2 :008 > nums = Array.new(10) {|e| e *= 2}
		 => [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] 
	
	5. nums = Array.[](1, 2, 3, 4, 5)
		initialises the array with the given values

		3.2.2 :010 > nums = Array.[](1, 2, 3, 4, 5)
		 => [1, 2, 3, 4, 5]

	6. nums = Array[1, 2, 3, 4, 5]	
		can also be initialised like this

		3.2.2 :011 > nums = Array[1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 

	7. digits = Array(0..9)
		initialise an array by giving a range of arguments
	
		3.2.2 :012 > digits = Array(0..9)
		 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]	


2. Public array methods (assuming array is an array object)  

	1. array & other_array
		Returns a new array containing elements common to the two arrays, with no duplicates.
		
		3.2.2 :011 > nums = Array[1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 
		3.2.2 :012 > digits = Array(0..9)
		 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :013 > nums & digits
		 => [1, 2, 3, 4, 5] 

	2. array * int [or] array * str
		Returns a new array built by concatenating the int copies of self. With a String argument, equivalent to self.join(str).
		
		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5] 
		3.2.2 :009 > nums*3
		 => [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 

		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"] 
		3.2.2 :012 > names*3
		 => ["Hi", "Hello", "Hi", "Hello", "Hi", "Hello"] 

	3. array + other_array
		Returns a new array built by concatenating the two arrays together to produce a third array.

		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5]
		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"]
		3.2.2 :013 > names + nums
		 => ["Hi", "Hello", 1, 2, 3, 4, 5] 

	4. array - other_array
		Returns a new array that is a copy of the original array, removing any items that also appear in other_array.
		
		3.2.2 :008 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5]
		3.2.2 :014 > digits = Array(3..7)
		 => [3, 4, 5, 6, 7] 
		3.2.2 :015 > nums - digits
		 => [1, 2] 
		
	5. array <=> other_array
		Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than). The comparison is casesensitive.

		3.2.2 :011 > names = Array(["Hi", "Hello"])
		 => ["Hi", "Hello"]
		3.2.2 :018 > strings = Array(["Hi", "Hello"])  
		 => ["Hi", "Hello"] 
		3.2.2 :019 > strings <=> names
		 => 0 
		3.2.2 :020 > strings = Array(["Hi", "hello"])  
		 => ["Hi", "hello"] 
		3.2.2 :021 > strings <=> names
		 => 1 
		3.2.2 :022 > strings = Array(["HI", "HELLO"])  
		 => ["HI", "HELLO"] 
		3.2.2 :023 > strings <=> names
		 => -1 

	6. array | other_array
		Returns a new array by joining array with other_array, removing duplicates.

		3.2.2 :024 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :025 > digits
		 => [3, 4, 5, 6, 7] 
		3.2.2 :026 > nums | digits
		 => [1, 2, 3, 4, 5, 6, 7] 

	7. array << obj
		Pushes the given object onto the end of array. This expression returns the array itself, so several appends may be chained together.

		3.2.2 :024 > nums
		 => [1, 2, 3, 4, 5]
		3.2.2 :027 > nums << 8
		 => [1, 2, 3, 4, 5, 8] 

		3.2.2 :030 > nums << 8 << 9 << 10 << 11
		 => [1, 2, 3, 4, 5, 8, 8, 9, 10, 11] 

	8. array <=> other_array
		Compares str with other_str, returning -1 (less than), 0 (equal), or 1 (greater than). The comparison is casesensitive.

		3.2.2 :032 > nums
		 => [1, 2, 3, 4, 5, 8, 8, 9, 10, 11] 
		3.2.2 :033 > digits
		 => [3, 4, 5, 6, 7] 
		3.2.2 :034 > nums <=> digits
		 => -1 
		
		3.2.2 :040 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :041 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :042 > nums <=> digits
		 => 0 
		
		3.2.2 :045 > nums
		 => [2, 3, 4, 5, 6] 
		3.2.2 :046 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :047 > nums <=> digits
		 => 1 

	9. array == other_array
		Two arrays are equal if they contain the same number of elements and if each element is equal to (according to Object.==) the corresponding element in the other array.

		3.2.2 :049 > nums == digits
		 => false 
		3.2.2 :050 > nums = [1, 2, 3, 4, 5]
		 => [1, 2, 3, 4, 5] 
		3.2.2 :051 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :052 > nums == digits
		 => true 

	10. array[index] [or] array[start, length] [or] array[range] [or] array.slice(index) [or] array.slice(start, length) [or] array.slice(range)
		Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. 
		Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) is out of range.

		3.2.2 :054 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :055 > nums[2]
		 => 3 

		3.2.2 :056 > nums[0, 3]
		 => [1, 2, 3] 
		
		3.2.2 :057 > nums[1..3]
		 => [2, 3, 4] 
		3.2.2 :058 > nums[1...3]
		 => [2, 3]

		3.2.2 :059 > nums.slice(2)
		 => 3 
		3.2.2 :061 > nums.slice(3)
		 => 4 
		3.2.2 :062 > nums
		 => [1, 2, 3, 4, 5] 

		3.2.2 :063 > nums.slice(1, 3)
		 => [2, 3, 4] 

		3.2.2 :064 > nums.slice(1..4)
		 => [2, 3, 4, 5] 

	11. array[index] = obj [or] array[start, length] = obj or an_array or nil [or] array[range] = obj or an_array or nil
		Sets the element at index, or replaces a subarray starting at start and continuing for length elements, or replaces a subarray specified by range. 
		If indices are greater than the current capacity of the array, the array grows automatically. Negative indices will count backward from the end of the array. 
		Inserts elements if length is zero. If nil is used in the second and third form, deletes elements from self.

		3.2.2 :065 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :066 > nums[3] = 5
		 => 5 
		3.2.2 :067 > nums
		 => [1, 2, 3, 5, 5] 
		
		3.2.2 :068 > nums[1, 3] = 2
		 => 2 
		3.2.2 :069 > nums
		 => [1, 2, 5] 
		3.2.2 :070 > nums[0, 2] = [1, 2, 3]
		 => [1, 2, 3] 
		3.2.2 :071 > nums
		 => [1, 2, 3, 5] 
		3.2.2 :072 > nums[1, 3] = nil
		 => nil 
		3.2.2 :073 > nums
		 => [1, nil] 

		3.2.2 :075 > nums = [1, 2, 3, 4, 5]
		3.2.2 :076 > nums[1..3] = 4
		 => 4 
		3.2.2 :077 > nums
		 => [1, 4, 5] 
		3.2.2 :078 > nums[0, 2] = [1, 2, 3, 4]
		 => [1, 2, 3, 4] 
		3.2.2 :079 > nums
		 => [1, 2, 3, 4, 5] 
		3.2.2 :080 > nums[0..3] = nil
		 => nil 
		3.2.2 :081 > nums
		 => [nil, 5] 

	12. array.abbrev(pattern = nil) 
		Calculates the set of unambiguous abbreviations for the strings in self. 
		If passed a pattern or a string, only the strings matching the pattern or starting with the string are considered.
		
		3.2.2 :084 > names
		 => ["Hi", "Hello"] 
		3.2.2 :085 > require 'abbrev'
		 => true 
		3.2.2 :086 > names.abbrev
		 => {"Hi"=>"Hi", "Hello"=>"Hello", "Hell"=>"Hello", "Hel"=>"Hello", "He"=>"Hello"}  

		3.2.2 :089 > names.abbrev(pattern = "He")
		 => {"Hello"=>"Hello", "Hell"=>"Hello", "Hel"=>"Hello", "He"=>"Hello"} 

	13. array.assoc(obj)
		Searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==. 
		Returns the first contained array that matches or nil if no match is found.
		
		3.2.2 :097 > nums = [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		 => [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		3.2.2 :098 > nums.assoc(9)
		 => [9, 7, 5, 4, 6, 8]
		3.2.2 :099 > nums.assoc(3)
		 => nil 

	14. array.at(index)
		Returns the element at index. A negative index counts from the end of self. Returns nil if the index is out of range.

		3.2.2 :100 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :101 > digits.at(4)
		 => 5 

	15. array.clear
		Removes all elements from array.
		
		3.2.2 :102 > nums
		 => [[1, 2, 3, 4], [2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 2, 3, 4, 6], [6, 5, 4, 3, 2], [9, 7, 5, 4, 6, 8]] 
		3.2.2 :103 > nums.clear
		 => [] 
		3.2.2 :104 > nums
		 => [] 

	16. array.collect { |item| block } [or] array.map { |item| block }
		Invokes block once for each element of self. Creates a new array containing the values returned by the block.

		3.2.2 :107 > nums
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :108 > numbers = nums.collect {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :109 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 

		3.2.2 :110 > numbers = nums.map {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18]
		3.2.2 :111 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 

	17. array.collect! { |item| block } [or] array.map! { |item| block }
		Invokes block once for each element of self, replacing the element with the value returned by block.

		3.2.2 :113 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :114 > numbers.collect! {|item| item = item / 2}
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :115 > numbers
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		
		3.2.2 :115 > numbers
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
		3.2.2 :117 > numbers.map! {|item| item = item * 2}
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18]

	18. array.compact
		Returns a copy of self with all nil elements removed.

		3.2.2 :122 > nums
		 => [1, 2, nil, 7, 8, nil] 
		3.2.2 :123 > nums.compact
		 => [1, 2, 7, 8]
		3.2.2 :124 > nums
		 => [1, 2, nil, 7, 8, nil]  

	19. array.compact!
		Removes nil elements from array. Returns nil if no changes were made.

		3.2.2 :124 > nums
		 => [1, 2, nil, 7, 8, nil] 
		3.2.2 :125 > nums.compact!
		 => [1, 2, 7, 8] 
		3.2.2 :126 > nums
		 => [1, 2, 7, 8] 

	20. array.concat(other_array)
		Appends the elements in other_array to self.

		3.2.2 :128 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18] 
		3.2.2 :129 > digits
		 => [1, 2, 3, 4, 5] 
		3.2.2 :130 > numbers.concat(digits)
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

	21. array.delete(obj) [or] array.delete(obj) { block }
		Deletes items from self that are equal to obj. If the item is not found, returns nil. If the optional code block is given, returns the result of block if the item is not found.

		3.2.2 :131 > numbers
		 => [2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :132 > numbers.delete(8)
		 => 8 
		3.2.2 :133 > numbers
		 => [2, 4, 6, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

		3.2.2 :134 > numbers.delete(0)
		 => nil 

		3.2.2 :137 > numbers.delete(54) {|item| item/2}
		 => 27 
	
	22. array.delete_at(index)
		Deletes the element at the specified index, returning that element, or nil if the index is out of range.

		3.2.2 :138 > numbers
		 => [2, 4, 6, 10, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :140 > numbers.delete_at(3)
		 => 10 
		3.2.2 :141 > numbers
		 => [2, 4, 6, 12, 14, 16, 18, 1, 2, 3, 4, 5] 

	23. array.delete_if { |item| block }
		Deletes every element of self for which block evaluates to true.
		
		3.2.2 :141 > numbers
		 => [2, 4, 6, 12, 14, 16, 18, 1, 2, 3, 4, 5] 
		3.2.2 :142 > numbers.delete_if {|item| item % 2 == 0}
		 => [1, 3, 5] 
		
	24. array.each { |item| block }
		Calls block once for each element in self, passing that element as a parameter.
		
		3.2.2 :150 > numbers
		 => [1, 3, 5] 
		3.2.2 :151 > numbers.each {|item| puts item}
		1
		3                                                                    
		5                                                                    
		 => [1, 3, 5]  

	25. array.each_index { |index| block }
		Same as Array#each, but passes the index of the element instead of the element itself.

		3.2.2 :152 > numbers
		 => [1, 3, 5] 
		3.2.2 :153 > numbers.each_index {|index| puts numbers[index]}
		1
		3                                                                        
		5                                                                        
		 => [1, 3, 5] 

	26. array.empty?
		Returns true if the self array contains no elements.

		3.2.2 :154 > numbers.empty?
		 => false 
		3.2.2 :155 > numbers.clear
		 => [] 
		3.2.2 :156 > numbers.empty?
		 => true 

	27. array.eql?(other)
		Returns true if array and other are the same object, or are both arrays with the same content.

		3.2.2 :157 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :158 > numbers
		 => [] 
		3.2.2 :159 > nums.eql?(numbers)
		 => false 
		3.2.2 :160 > numbers = [1, 2, 7, 8]
		 => [1, 2, 7, 8] 
		3.2.2 :161 > nums.eql?(numbers)
		 => true 
	
	28. array.fetch(index) [or] array.fetch(index, default) [or] array.fetch(index) { |index| block }
		Tries to return the element at position index. If index lies outside the array, the first form throws an IndexError exception, 
		the second form returns default, and the third form returns the value of invoking block, passing in index. Negative values of index count from the end of the array.

		3.2.2 :164 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :165 > nums.fetch(2)
		 => 7 

		3.2.2 :166 > nums.fetch(5)
		(irb):166:in `fetch': index 5 outside of array bounds: -4...4 (IndexError)
		        from (irb):166:in `<main>'                
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'               
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>'

		3.2.2 :167 > nums.fetch(5, 2)
		 => 2 

		3.2.2 :168 > nums.fetch(5) {|index| index*2}
		 => 10 

	29. array.fill(obj) [or] array.fill(obj, start [, length]) [or] array.fill(obj, range) [or] array.fill { |index| block } [or] array.fill(start [, length] ) { |index| block } 
	    [or] array.fill(range) { |index| block }
		The first three forms set the selected elements of self to obj. A start of nil is equivalent to zero. A length of nil is equivalent to self.length. 
		The last three forms fill the array with the value of the block. The block is passed with the absolute index of each element to be filled.

		3.2.2 :169 > nums
		 => [1, 2, 7, 8] 
		3.2.2 :170 > nums.fill(3)
		 => [3, 3, 3, 3] 
		3.2.2 :171 > nums
		 => [3, 3, 3, 3] 

		3.2.2 :173 > nums
		 => [3, 3, 3, 3] 
		3.2.2 :174 > nums.fill(4, 1, 2)
		 => [3, 4, 4, 3] 

		3.2.2 :175 > nums.fill(5, 1..3)
		 => [3, 5, 5, 5] 

		3.2.2 :176 > nums.fill {|index| nums[index] += nums[index-1]}
		 => [8, 13, 18, 23] 

		3.2.2 :177 > nums.fill(2) {|index| nums[index] -= nums[index-1]}
		 => [8, 13, 5, 18]

		3.2.2 :178 > nums.fill(1..3) {|index| nums[index] = nums[index]*2}
		 => [8, 26, 10, 36]

	30. array.first [or] array.first(n)
		Returns the first element, or the first n elements, of the array. If the array is empty, the first form returns nil, and the second form returns an empty array.

		3.2.2 :179 > nums
		 => [8, 26, 10, 36] 
		3.2.2 :180 > nums.first
		 => 8 
		3.2.2 :181 > nums.first(3)
		 => [8, 26, 10] 

	31. array.flatten
		Returns a new array that is a one-dimensional flattening of this array (recursively).	

		3.2.2 :185 > nums = [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21]
		 => [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21] 
		3.2.2 :186 > nums.flatten
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 : 187 > nums
		 => [[1, 32, 12, 4], [3, 2], 1, 1, 3, 54, 21] 

	32. array.flatten!
		Flattens array in place. Returns nil if no modifications were made. (array contains no subarrays.)
		
		3.2.2 :188 > nums.flatten!
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :189 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21]
	
	33. array.frozen?
		Returns true if array is frozen (or temporarily frozen while being sorted).

		3.2.2 :190 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :191 > nums.frozen?
		 => false

	34. array.hash
		Computes a hash-code for array. Two arrays with the same content will have the same hash code.
		
		3.2.2 :193 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :194 > nums.hash
		 => -1814573711083090795 

	35. array.include?(obj)
		Returns true if obj is present in self, false otherwise.
		
		3.2.2 :196 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21] 
		3.2.2 :197 > nums.include?(21)
		 => true 
		3.2.2 :198 > nums.include?(41)
		 => false 
	
	36. array.index(obj)
		Returns the index of the first object in self that is == to obj. Returns nil if no match is found.

		3.2.2 :202 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :203 > nums.index(12)
		 => 2 

	37. array.indexes(i1, i2, ... iN)
		This methods is deprecated in latest version of Ruby so please use Array#values_at.

		3.2.2 :204 > nums.indexes(1, 2, 3)
		(irb):204:in `<main>': undefined method `indexes' for [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12]:Array (NoMethodError)                                  
		Did you mean?  index                                                   
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'                                    
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'   
        		from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>' 

	38. array.indices(i1, i2, ... iN)
		This methods is deprecated in latest version of Ruby so please use Array#values_at.

		3.2.2 :205 > nums.indices(1, 2, 3)
		(irb):205:in `<main>': undefined method `indices' for [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12]:Array (NoMethodError)
		Did you mean?  index                                                   
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/lib/ruby/gems/3.2.0/gems/irb-1.6.2/exe/irb:11:in `<top (required)>'
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `load'   
		        from /home/beryl/.rvm/rubies/ruby-3.2.2/bin/irb:31:in `<main>' 

	39. array.insert(index, obj...)
		Inserts the given values before the element with the given index (which may be negative).

		3.2.2 :206 > nums
		 => [1, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :207 > nums.insert(1, 23)
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 12] 
		3.2.2 :208 > nums.insert(-2, 31)
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 

	40. array.inspect
		Creates a printable version of array.

		3.2.2 :209 > nums.inspect
		 => "[1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12]" 

	41. array.join(sep = $,)
		Returns a string created by converting each element of the array to a string, separated by sep.

		3.2.2 :210 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :211 > nums.join(sep = $,)
		 => "123321243211354213112" 
		3.2.2 :212 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :213 > nums.join(sep = " ",)
		 => "1 23 32 12 4 3 2 1 1 3 54 21 31 12"

	42. array.last [or] array.last(n)
		Returns the last element(s) of self. If array is empty, the first form returns nil.

		3.2.2 :214 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :215 > nums.last
		 => 12 
		3.2.2 :216 > nums.last(5)
		 => [3, 54, 21, 31, 12] 
	43. array.length
		Returns the number of elements in self. May be zero.

		3.2.2 :217 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :218 > nums.length
		 => 14 

	44. array.map { |item| block } [or] array.collect { |item| block }
		Invokes block once for each element of self. Creates a new array containing the values returned by the block.

		3.2.2 :219 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :220 > nums.map {|item| item *= 2}
		 => [2, 46, 64, 24, 8, 6, 4, 2, 2, 6, 108, 42, 62, 24]

		3.2.2 :221 > nums.collect {|item| item *= 3}
		 => [3, 69, 96, 36, 12, 9, 6, 3, 3, 9, 162, 63, 93, 36] 

	45. array.map! { |item| block } [or] array.collect! { |item| block }
		Invokes block once for each element of array, replacing the element with the value returned by block.

		3.2.2 :222 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :223 > nums.map! {|item| item *= 2}
		 => [2, 46, 64, 24, 8, 6, 4, 2, 2, 6, 108, 42, 62, 24] 
		3.2.2 :224 > nums.collect! {|item| item /= 2}
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12] 
		3.2.2 :225 > nums
		 => [1, 23, 32, 12, 4, 3, 2, 1, 1, 3, 54, 21, 31, 12]

	46. array.pop
		Removes the last element from array and returns it, or nil if array is empty.

		3.2.2 :237 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12] 
		3.2.2 :238 > nums.pop
		 => 12 

	47. array.push(obj, ...)
		Pushes (appends) the given obj onto the end of this array. This expression returns the array itself, so several appends may be chained together.

		3.2.2 :239 > nums
		 => [1, 23, nil, 3, nil, 21, 31] 
		3.2.2 :240 > nums.push(12, 13, 14)
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 

	48. array.rassoc(key)
		Searches through the array whose elements are also arrays. Compares key with the second element of each contained array using ==. Returns the first contained array that matches.

		3.2.2 :245 > num = [[1, 3, 4, 5], [3, 2, 1, 4], [4, 3, 6, 5], [5, 6, 3, 7]]
		 => [[1, 3, 4, 5], [3, 2, 1, 4], [4, 3, 6, 5], [5, 6, 3, 7]] 
		3.2.2 :246 > num.rassoc(3)
		 => [1, 3, 4, 5] 

	49. array.reject { |item| block }
		Returns a new array containing the items array for which the block is not true.

		3.2.2 :247 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 
		3.2.2 :248 > nums.reject {|item| item == nil}
		 => [1, 23, 3, 21, 31, 12, 13, 14] 

	50. array.reject! { |item| block }
		Deletes elements from array for which the block evaluates to true, but returns nil if no changes were made. Equivalent to Array#delete_if.

		3.2.2 :249 > nums
		 => [1, 23, nil, 3, nil, 21, 31, 12, 13, 14] 
		3.2.2 :250 > nums.reject! {|item| item == nil}
		 => [1, 23, 3, 21, 31, 12, 13, 14] 
		3.2.2 :251 > nums
		 => [1, 23, 3, 21, 31, 12, 13, 14] 

	51. array.replace(other_array)
		Replaces the contents of array with the contents of other_array, truncating or expanding if necessary.
		
		3.2.2 :003 > nums = Array(1..5)
		 => [1, 2, 3, 4, 5] 
		3.2.2 :004 > digits = Array(8..12)
		 => [8, 9, 10, 11, 12] 
		3.2.2 :005 > nums.replace(digits)
		 => [8, 9, 10, 11, 12] 
		3.2.2 :006 > nums
		 => [8, 9, 10, 11, 12] 

	52. array.reverse
		Returns a new array containing array's elements in reverse order.

		3.2.2 :007 > nums
		 => [8, 9, 10, 11, 12] 
		3.2.2 :008 > nums.reverse
		 => [12, 11, 10, 9, 8] 
		3.2.2 :009 > nums
		 => [8, 9, 10, 11, 12] 

	53. array.reverse!
		Reverses array in place.

		3.2.2 :010 > nums
		 => [8, 9, 10, 11, 12] 
		3.2.2 :011 > nums.reverse!
		 => [12, 11, 10, 9, 8] 
		3.2.2 :012 > nums
		 => [12, 11, 10, 9, 8] 

	54. array.reverse_each {|item| block }
		Same as Array#each, but traverses array in reverse order.
		
		3.2.2 :013 > digits
		 => [8, 9, 10, 11, 12] 
		3.2.2 :014 > digits.reverse_each {|item| puts item}
		12
		11                                                                          
		10                                                                          
		9                                                                           
		8                                                                           
		 => [8, 9, 10, 11, 12]  
	
	55. array.rindex(obj)
		Returns the index of the last object in array == to obj. Returns nil if no match is found.
		
		3.2.2 :015 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :016 > nums.rindex(9)
		 => 3 

	56. array.select {|item| block }
		Invokes the block passing in successive elements from array, returning an array containing those elements for which the block returns a true value.

		3.2.2 :017 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :018 > nums.select {|item| item%2==0}
		 => [12, 10, 8] 


	57. array.shift
		Returns the first element of self and removes it (shifting all other elements down by one). Returns nil if the array is empty.

		3.2.2 :019 > nums
		 => [12, 11, 10, 9, 8] 
		3.2.2 :020 > nums.shift
		 => 12 
		3.2.2 :021 > nums
		 => [11, 10, 9, 8] 

	58. array.size
		Returns the length of array (number of elements). Alias for length.
		
		3.2.2 :022 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :023 > nums.size
		 => 4 

	59. array.slice(index) [or] array.slice(start, length) [or] array.slice(range) [or] array[index] [or] array[start, length] [or] array[range]

		Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. 
		Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) are out of range.

		3.2.2 :024 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :025 > nums.slice(2)
		 => 9 
		3.2.2 :026 > nums.slice(1, 3)
		 => [10, 9, 8] 
		3.2.2 :027 > nums.slice(1..3)
		 => [10, 9, 8] 
		3.2.2 :028 > nums[3]
		 => 8 
		3.2.2 :029 > nums[1, 2]
		 => [10, 9] 
		3.2.2 :030 > nums[1..3]
		 => [10, 9, 8] 

	60. array.slice!(index) [or] array.slice!(start, length) [or] array.slice!(range)
		Deletes the element(s) given by an index (optionally with a length) or by a range. Returns the deleted object, subarray, or nil if index is out of range.

		3.2.2 :031 > nums
		 => [11, 10, 9, 8] 
		3.2.2 :032 > nums.slice!(3)
		 => 8 
		3.2.2 :033 > nums
		 => [11, 10, 9] 
		3.2.2 :034 > nums.slice!(0, 2)
		 => [11, 10] 
		3.2.2 :035 > nums
		 => [9] 
		3.2.2 :036 > nums << 4 << 5 << 8
		 => [9, 4, 5, 8] 
		3.2.2 :037 > nums.slice!(0..3)
		 => [9, 4, 5, 8] 
		3.2.2 :038 > nums
		 => [] 

	61. array.sort [or] array.sort { | a,b | block }
		Returns a new array created by sorting self.

		3.2.2 :042 > nums
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
		3.2.2 :043 > nums.sort
		 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

	62. array.sort_by {|str| block}
		Returns a new array by sorting self according to given block.		

		3.2.2 :061 > strings = ["ab", "bar", "zoo", "igloo", "koo"]
		 => ["ab", "bar", "zoo", "igloo", "koo"] 
		3.2.2 :064 > strings.sort_by {|s| s.length}
		 => ["ab", "bar", "zoo", "koo", "igloo"] 
	
	63. array.sort! [or] array.sort! { | a,b | block }
		Sorts self in place.

		3.2.2 :071 > nums
		 => [2, 3, 4, 5, 5, 3, 7, 8, 9, 10, 5] 
		3.2.2 :072 > nums.sort!
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :073 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10]

	64. array.to_a
		Returns self. If called on a subclass of Array, converts the receiver to an Array object.

		3.2.2 :091 > b = nums.to_a
	 	=> [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :092 > b
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 


	65. array.to_ary
		Returns self.
		
		3.2.2 :080 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :081 > nums.to_ary
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 


	66. array.to_s
		Returns self.join.

		3.2.2 :077 > a
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :079 > a.to_s
		 => "[2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10]" 

	67. array.transpose
		Assumes that self is an array of arrays and transposes the rows and columns.

		3.2.2 :093 > matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
		 => [[1, 2, 3], [4, 5, 6], [7, 8, 9]] 
		3.2.2 :094 > matrix.transpose
		 => [[1, 4, 7], [2, 5, 8], [3, 6, 9]] 

	68. array.uniq
		Returns a new array by removing duplicate values in array.

		3.2.2 :095 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :096 > nums.uniq
		 => [2, 3, 4, 5, 7, 8, 9, 10] 
	
	69. array.uniq!
		Removes duplicate elements from self. Returns nil if no changes are made (that is, no duplicates are found).

		3.2.2 :097 > nums
		 => [2, 3, 3, 4, 5, 5, 5, 7, 8, 9, 10] 
		3.2.2 :098 > nums.uniq!
		 => [2, 3, 4, 5, 7, 8, 9, 10] 

	70. array.unshift(obj, ...)
		Prepends objects to the front of array, other elements up one.

		3.2.2 :099 > nums
		 => [2, 3, 4, 5, 7, 8, 9, 10] 
		3.2.2 :100 > nums.unshift(4)
		 => [4, 2, 3, 4, 5, 7, 8, 9, 10] 

	71. array.values_at(selector,...)
		Returns an array containing the elements in self corresponding to the given selector (one or more). The selectors may be either integer indices or ranges.

		3.2.2 :101 > nums.values_at(3)
		 => [4] 
		3.2.2 :102 > nums.values_at(3..6)
		 => [4, 5, 7, 8] 
		
	72. array.zip(arg, ...) [or] array.zip(arg, ...){ | arr | block }
		Converts any arguments to arrays, then merges elements of array with corresponding elements from each argument.

		3.2.2 :107 > a = [1, 2, 3, 4]
		 => [1, 2, 3, 4] 
		3.2.2 :108 > b = [5, 6, 7, 8]
		 => [5, 6, 7, 8] 
		3.2.2 :109 > c = [9, 10, 11, 12]
		 => [9, 10, 11, 12] 
		3.2.2 :110 > a.zip(b, c)
		 => [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] 

3. Create a string
	new(string = '', **opts) → new_string 

	1. s = String.new
		Returns a new String that is a copy of string. With no arguments, returns the empty string with the Encoding ASCII-8BIT:

		3.2.2 :111 > s = String.new
		 => "" 
		3.2.2 :112 > s
		 => "" 
		3.2.2 :113 > s.encoding
		 => #<Encoding:ASCII-8BIT> 

	2. String.new('str')
		With optional argument string and no keyword arguments, returns a copy of string with the same encoding:
		
		3.2.2 :114 > String.new('new string')
		 => "new string"

		(Unlike String.new, a string literal like '' or a here document literal always has script encoding.)

	3. String.new('str', encoding: 'ASCII').encoding 
		With optional keyword argument encoding, returns a copy of string with the specified encoding; 
		the encoding may be an Encoding object, an encoding name, or an encoding name alias:

		3.2.2 :115 > String.new('new string', encoding: 'ASCII').encoding 
		 => #<Encoding:US-ASCII> 

		The given encoding need not be valid for the string’s content, and that validity is not checked:

		3.2.2 :116 > s = String.new('掲ぱばトほ', encoding: 'ascii')
		 => "\xE6\x8E\xB2\xE3\x81\xB1\xE3\x81\xB0\xE3\x83\x88\xE3\x81\xBB" 
		3.2.2 :117 > s.valid_encoding?
		 => false 

		But the given encoding itself is checked:		

		3.2.2 :118 > String.new('new string', encoding: 'bar')
		(irb):118:in `initialize': unknown encoding name - bar (ArgumentError)


	4. String.new(capacity: 1)
		With optional keyword argument capacity, returns a copy of string (or an empty string, if string is not given); 
		the given capacity is advisory only, and may or may not set the size of the internal buffer, which may in turn affect performance:

		3.2.2 :119 > s = String.new(capacity: 2)
		 => "" 
		3.2.2 :120 > s
		 => "" 
		
		The string, encoding, and capacity arguments may all be used together:

		3.2.2 :121 > s = String.new('hello', encoding: 'UTF-8', capacity: 10)
		 => "hello" 

	5. s = 'str'
		string literal
		
		3.2.2 :122 > s = 'Hello'
		 => "Hello" 

4. Public String methods ( Assuming str is a String object )

	1. string % object → new_string
		Returns the result of formatting object into the format specification self. 
		If self contains multiple substitutions, object must be an Array or Hash containing the values to be substituted: 
		
		3.2.2 :124 > "fun = %{fun}, baz = %{baz}" % {fun: 'bar', baz: 'bat'}
		 => "fun = bar, baz = bat" 

	2. string * integer → new_string 
		Returns a new String containing integer copies of self:

		3.2.2 :126 > s*5
		 => "HelloHelloHelloHelloHello" 

	3. string + other_string → new_string
		Returns a new String containing other_string concatenated to self:

		3.2.2 :133 > s
		 => "Hello" 
		3.2.2 :134 > t
		 => "How are you?" 
		3.2.2 :135 > s + t
		 => "HelloHow are you?" 

	4. +string → new_string or self click to toggle source
		Returns self if self is not frozen. Otherwise returns self.dup, which is not frozen.

	5. -string → frozen_string
		Returns a frozen, possibly pre-existing copy of the string. The returned String will be deduplicated as long as it does not have any instance variables
		set on it and is not a String subclass. String#dedup is an alias for String#-@.

	6. string << object → string
		Concatenates object to self and returns self. If object is an Integer, the value is considered a codepoint and converted to a character before concatenation:
		Related: String#concat, which takes multiple arguments.

		3.2.2 :137 > s
		 => "Hello" 
		3.2.2 :138 > s << "I am Abhi"
		 => "HelloI am Abhi" 
		3.2.2 :139 > s << 23
		 => "HelloI am Abhi\u0017" 
		3.2.2 :140 > s << 65
		 => "HelloI am Abhi\u0017A" 

	7. string <=> other_string → -1, 0, 1, or nil
		Compares self and other_string, returning -1 if other_string is larger. 0 if the two are equal. 1 if other_string is smaller. nil if the two are incomparable.

		3.2.2 :142 > s = "Hello"
		 => "Hello" 
		3.2.2 :143 > t = "hello"
		 => "hello" 
		3.2.2 :144 > s <=> t
		 => -1 
				
		3.2.2 :145 > t <=> s
		 => 1 
		
		3.2.2 :146 > t = "Hello"
		 => "Hello" 
		3.2.2 :147 > s <=> t
		 => 0 

	8. string == object → true or false [OR] string === object → true or false

		Returns true if object has the same length and content; as self; false otherwise: 
		Returns false if the two strings’ encodings are not compatible:
		If object is not an instance of String but responds to to_str, then the two strings are compared using object.==.

		3.2.2 :148 > s
		 => "Hello" 
		3.2.2 :149 > t
		 => "Hello" 
		3.2.2 :150 > s == t
		 => true 
		3.2.2 :151 > s === t
		 => true 
		3.2.2 :152 > s = "hello"
		 => "hello" 
		3.2.2 :153 > s == t
		 => false 
		3.2.2 :154 > s === t
		 => false 

	9. string =~ regexp → integer or nil [OR] string =~ object → integer or nil
		Returns the Integer index of the first substring that matches the given regexp, or nil if no match found:
		Note: also updates Special global variables at Regexp.
		If the given object is not a Regexp, returns the value returned by object =~ self.
		Note that string =~ regexp is different from regexp =~ string (see Regexp#=~):

		3.2.2 :155 > s
		 => "hello" 
		3.2.2 :156 > s =~ /h/
		 => 0 
		3.2.2 :157 > s =~ /l/
		 => 2 
		3.2.2 :158 > s =~ /i/
		 => nil 

	10. string[index] → new_string or nil [OR] string[start, length] → new_string or nil [OR] string[range] → new_string or nil [OR] string[regexp, capture = 0] → new_string or nil 
	     [OR] string[substring] → new_string or nil
		Returns the substring of self specified by the arguments.

		3.2.2 :159 > s
		 => "hello" 
		3.2.2 :160 > s[2]
		 => "l" 
		3.2.2 :161 > s[10]
		 => nil 
		3.2.2 :162 > s[1, 3]
		 => "ell" 
		3.2.2 :165 > s[2..4]
		 => "llo" 
		3.2.2 :166 > s[/l/]
		 => "l" 
		3.2.2 :167 > s['ll']
		 => "ll" 

	11. ascii_only? → true or false
		Returns true if self contains only ASCII characters, false otherwise:

		3.2.2 :001 > s = 'Hello'
		 => "Hello" 
		3.2.2 :002 > s.ascii_only?
		 => true 

	12. b → string
		Returns a copy of self that has ASCII-8BIT encoding; the underlying bytes are not modified:

		3.2.2 :003 > s.encoding
		 => #<Encoding:UTF-8> 
		3.2.2 :004 > t = s.b
		 => "Hello" 
		3.2.2 :005 > t.encoding
		 => #<Encoding:ASCII-8BIT>  
		3.2.2 :007 > s.encoding
		 => #<Encoding:UTF-8> 
		
	13. byteindex(substring, offset = 0) → integer or nil [OR] byteindex(regexp, offset = 0) → integer or nil
		Returns the Integer byte-based index of the first occurrence of the given substring, or nil if none found:

		3.2.2 :008 > s
		 => "Hello" 
		3.2.2 :009 > s.byteindex('e')
		 => 1 
		3.2.2 :010 > s.byteindex('ell')
		 => 1 
		3.2.2 :011 > s.byteindex('oo')
		 => nil 

		Returns the Integer byte-based index of the first match for the given Regexp regexp, or nil if none found:
	
		3.2.2 :012 > s.byteindex(/el/)
		 => 1 

		Integer argument offset, if given, specifies the byte-based position in the string to begin the search:
		
		3.2.2 :013 > s
		 => "Hello" 
		3.2.2 :014 > s.byteindex('o', 2)
		 => 4 
		
		If offset is negative, counts backward from the end of self:
		
		3.2.2 :015 > s.byteindex('o', -2)
		 => 4 

		If offset does not land on character (codepoint) boundary, IndexError is raised.
		Related: String#index, String#byterindex.

	14. byterindex(substring, offset = self.bytesize) → integer or nil [OR] byterindex(regexp, offset = self.bytesize) → integer or nil
		Returns the Integer byte-based index of the last occurrence of the given substring, or nil if none found:

		3.2.2 :016 > s
		 => "Hello" 
		3.2.2 :017 > s.byterindex('H')
		 => 0 

		Returns the Integer byte-based index of the last match for the given Regexp regexp, or nil if none found:

		3.2.2 :018 > s
		 => "Hello" 
		3.2.2 :019 > s.byterindex(/e/)
		 => 1 

		The last match means starting at the possible last position, not the last of longest matches.

		3.2.2 :020 > s.byterindex(/l+/)
		 => 3 

		If offset does not land on character (codepoint) boundary, IndexError is raised.
		Related: String#byteindex.

	15. bytes → array_of_bytes
		Returns an array of the bytes in self:

		3.2.2 :021 > s
		 => "Hello" 
		3.2.2 :022 > s.bytes
		 => [72, 101, 108, 108, 111] 

	16. bytesize → integer
		Returns the count of bytes (not characters) in self:

		3.2.2 :023 > s
		 => "Hello" 
		3.2.2 :024 > s.bytesize
		 => 5 

	17. bytesplice(index, length, str) → string [OR] bytesplice(range, str) → string
		Replaces some or all of the content of self with str, and returns self. The portion of the string affected is determined using the same criteria as String#byteslice, 
		except that length cannot be omitted. If the replacement string is not the same length as the text it is replacing, the string will be adjusted accordingly. 
		The form that take an Integer will raise an IndexError if the value is out of range; the Range form will raise a RangeError. 
		If the beginning or ending offset does not land on character (codepoint) boundary, an IndexError will be raised.

	18. capitalize(*options) → string
		Returns a string containing the characters in self; the first character is upcased; the remaining characters are downcased:
		
		3.2.2 :025 > s = 'hello'
		 => "hello" 
		3.2.2 :026 > s.capitalize
		 => "Hello" 
		3.2.2 :027 > s
		 => "hello" 

	19. capitalize!(*options) → self or nil
		Upcases the first character in self; downcases the remaining characters; returns self if any changes were made, nil otherwise:

		3.2.2 :029 > s
		 => "hello" 
		3.2.2 :030 > s.capitalize!
		 => "Hello" 
		3.2.2 :031 > s
		 => "Hello" 

	20. casecmp(other_string) → -1, 0, 1, or nil
		Compares self.downcase and other_string.downcase; returns:-1 if other_string.downcase is larger. 0 if the two are equal. 1 if other_string.downcase is smaller. 
		nil if the two are incomparable.

		3.2.2 :046 > s
		 => "hell" 
		3.2.2 :047 > t
		 => "helloo" 
		3.2.2 :048 > s.casecmp(t)
		 => -1 
		3.2.2 :049 > s << 'ooo'
		 => "hellooo" 
		3.2.2 :050 > s.casecmp(t)
		 => 1 
		3.2.2 :051 > s = 'hello'
		 => "hello" 
		3.2.2 :052 > t = 'hello'
		 => "hello" 
		3.2.2 :053 > s.casecmp(t)
		 => 0

	21. casecmp?(other_string) → true, false, or nil 
		Returns true if self and other_string are equal after Unicode case folding, otherwise false, Returns nil if the two values are incomparable.

		3.2.2 :054 > s.casecmp?(t)
		 => true 
		3.2.2 :055 > t << 'o'
		 => "helloo" 
		3.2.2 :056 > s.casecmp?(t)
		 => false 
		3.2.2 :057 > s.casecmp?(1)
		 => nil 

	22. center(size, pad_string = ' ') → new_string
		Returns a centered copy of self. If integer argument size is greater than the size (in characters) of self, returns a new string of length size that is a copy of self, 
		centered and padded on both ends with pad_string. If size is not greater than the size of self, returns a copy of self:

		3.2.2 :058 > s
		 => "hello" 
		3.2.2 :059 > s.center(10)
		 => "  hello   " 
		3.2.2 :060 > s.center(4)
		 => "hello" 

	23. chars → array_of_characters
		Returns an array of the characters in self:

		3.2.2 :061 > s
		 => "hello" 
		3.2.2 :062 > s.chars
		 => ["h", "e", "l", "l", "o"] 

	24. chomp(line_sep = $/) → new_string
		Returns a new string copied from self, with trailing characters possibly removed:

		3.2.2 :079 > s = "hello"
		 => "hello" 
		3.2.2 :080 > s.center(20)
		 => "       hello        " 
		3.2.2 :081 > s.chomp
		 => "hello" 
	
	25. chomp!(line_sep = $/) → self or nil
		Like String#chomp, but modifies self in place; returns nil if no modification made, self otherwise.
		
	26. chop → new_string 
		Returns a new string copied from self, with trailing characters possibly removed. Removes "\r\n" if those are the last two characters. 
		Otherwise removes the last character if it exists. If you only need to remove the newline separator at the end of the string, String#chomp is a better alternative.
	
		3.2.2 :085 > "abc\r\n".chop
		 => "abc" 
		3.2.2 :093 > s.chop
		 => "hell" 

	27. chop! → self or nil
		Like String#chop, but modifies self in place; returns nil if self is empty, self otherwise.

	28. chr → string
		Returns a string containing the first character of self:
		
		3.2.2 :094 > s
		 => "hello" 
		3.2.2 :095 > s.chr
		 => "h" 

	29. clear → self
		Removes the contents of self:

		3.2.2 :096 > s
		 => "hello" 
		3.2.2 :097 > s.clear
		 => ""

	30. codepoints → array_of_integers
		Returns an array of the codepoints in self; each codepoint is the integer value for a character:

		3.2.2 :099 > s = 'hello'
		 => "hello" 
		3.2.2 :100 > s.codepoints
		 => [104, 101, 108, 108, 111] 

	31. concat(*objects) → string
		Concatenates each object in objects to self and returns self:

		3.2.2 :001 > s = 'Hello'
		 => "Hello" 
		3.2.2 :002 > s.concat('hi', 'hill')
		 => "Hellohihill" 

		For each given object object that is an Integer, the value is considered a codepoint and converted to a character before concatenation:

		3.2.2 :003 > s.concat(32, 'bar', 32, 'baz')
		 => "Hellohihill bar baz" 

	32. count(*selectors) → integer
		Returns the total number of characters in self that are specified by the given selectors

		3.2.2 :012 > s = 'hello world'
		 => "hello world" 
		3.2.2 :013 > s.count('lo')
		 => 5 

	33. delete(*selectors) → new_string
		Returns a copy of self with characters specified by selectors removed 

		3.2.2 :014 > s
		 => "hello world" 
		3.2.2 :015 > s.delete('lo')
		 => "he wrd" 
		
	34. delete!(*selectors) → self or nil
		Like String#delete, but modifies self in place. Returns self if any changes were made, nil otherwise.

	35. delete_prefix(prefix) → new_string
		Returns a copy of self with leading substring prefix removed:

		3.2.2 :016 > s
		 => "hello world" 
		3.2.2 :017 > s.delete_prefix('he')
		 => "llo world" 

	36. delete_prefix!(prefix) → self or nil
		Like String#delete_prefix, except that self is modified in place. Returns self if the prefix is removed, nil otherwise.

	37. delete_suffix(suffix) → new_string
		Returns a copy of self with trailing substring suffix removed:

		3.2.2 :018 > s
		 => "hello world" 
		3.2.2 :020 > s.delete_suffix('ld')
		 => "hello wor" 

	38. delete_suffix!(suffix) → self or nil
		Like String#delete_suffix, except that self is modified in place. Returns self if the suffix is removed, nil otherwise.

	39. downcase(*options) → string
		Returns a string containing the downcased characters in self:

		3.2.2 :022 > s = 'HeLLo WorLD!'
		 => "HeLLo WorLD!" 
		3.2.2 :023 > s.downcase
		 => "hello world!" 
	
	40. downcase!(*options) → self or nil
		Downcases the characters in self; returns self if any changes were made, nil otherwise:

		3.2.2 :024 > s
		 => "HeLLo WorLD!" 
		3.2.2 :025 > s.downcase!
		 => "hello world!" 

	41. dump → string
		Returns a printable version of self, enclosed in double-quotes, with special characters escaped, and with non-printing characters replaced by hexadecimal notation:

		3.2.2 :026 > s
		 => "hello world!" 
		3.2.2 :027 > s.dump
		 => "\"hello world!\"" 

	42. each_byte {|byte| ... } → self [OR] each_byte → enumerator
		Calls the given block with each successive byte from self; returns self:

		3.2.2 :033 > s
		 => "hello world!" 
		3.2.2 :034 > s.each_byte {|byte| print byte, ' '}
		104 101 108 108 111 32 119 111 114 108 100 33  => "hello world!" 

	43. each_char {|c| ... } → self [OR] each_char → enumerator
		Calls the given block with each successive character from self; returns self:

		3.2.2 :035 > s
		 => "hello world!" 
		3.2.2 :037 > s.each_char {|char| print char, ' ' }
		h e l l o   w o r l d !  => "hello world!

	44. each_codepoint {|integer| ... } → self [OR] each_codepoint → enumerator
		Calls the given block with each successive codepoint from self; each codepoint is the integer value for a character; returns self:

		3.2.2 :038 > s
		 => "hello world!" 
		3.2.2 :039 > s.each_codepoint {|codepoint| print codepoint, ' '}
		104 101 108 108 111 32 119 111 114 108 100 33  => "hello world!" 

	45. each_line(line_sep = $/, chomp: false) {|substring| ... } → self [OR] each_line(line_sep = $/, chomp: false) → enumerator
		With a block given, forms the substrings (“lines”) that are the result of splitting self at each occurrence of the given line separator line_sep; 
		passes each line to the block; returns self:

		3.2.2 :054 > s = "This is the first line.\nThis is the second line.\nThis is line three.\nThis is line four."
		 => "This is the first line.\nThis is the second line.\nThis is line three.\nThis is line four." 
		3.2.2 :055 > print s
		This is the first line.
		This is the second line.                                                                                                                      
		This is line three.                                                                                                                           
		This is line four. => nil                                                                                                                     
		3.2.2 :056 > s.each_line(' is ')
		 => #<Enumerator: ...> 
		3.2.2 :057 > s.each_line(' is ') {|line| p line}
		"This is "
		"the first line.\nThis is "                                              
		"the second line.\nThis is "                                             
		"line three.\nThis is "                                                  
		"line four."                                                             
		 => "This is the first line.\nThis is the second line.\nThis is line three.\nThis is line four." 

		3.2.2 :058 > s.each_line(' is ', chomp: true) {|line| p line}
		"This"
		"the first line.\nThis"                                                  
		"the second line.\nThis"                                                 
		"line three.\nThis"                                                      
		"line four."                                                             
		 => "This is the first line.\nThis is the second line.\nThis is line three.\nThis is line four." 

	46. empty? → true or false
		Returns true if the length of self is zero, false otherwise:

		3.2.2 :060 > s = "Hello"
		 => "Hello" 
		3.2.2 :061 > s.empty?
		 => false 
		3.2.2 :062 > s.clear
		 => "" 
		3.2.2 :063 > s.empty?
		 => true 

	47. encoding → encoding
		Returns the Encoding object that represents the encoding of obj.

		3.2.2 :066 > s
		 => "Hello" 
		3.2.2 :067 > s.encoding
		 => #<Encoding:UTF-8> 

	48. end_with?(*strings) → true or false
		Returns whether self ends with any of the given strings. Returns true if any given string matches the end, false otherwise:

		3.2.2 :068 > s
		 => "Hello" 
		3.2.2 :069 > s.end_with?('llo')
		 => true 
		3.2.2 :070 > s.end_with?('lla')
		 => false 

	49. eql?(object) → true or false
		Returns true if object has the same length and content; as self; false otherwise. Returns false if the two strings’ encodings are not compatible:

		3.2.2 :071 > s
		 => "Hello" 
		3.2.2 :072 > s.eql?('Hello')
		 => true 
		3.2.2 :073 > s.eql?('Hell')
		 => false 

	50. force_encoding(encoding) → self
		Changes the encoding of self to encoding, which may be a string encoding name or an Encoding object; returns self. Does not change the underlying bytes:
		Makes the change even if the given encoding is invalid for self:

		3.2.2 :074 > s
		 => "Hello" 
		3.2.2 :075 > s.encoding
		 => #<Encoding:UTF-8> 
		3.2.2 :076 > s.force_encoding('ascii')
		 => "Hello" 
		3.2.2 :077 > s.encoding
		 => #<Encoding:US-ASCII> 

	51. freeze()
		Freezes the string

		3.2.2 :092 > s
		 => "hi" 
		3.2.2 :093 > s.frozen?
		 => false 
		3.2.2 :094 > s.freeze
		 => "hi" 
		3.2.2 :095 > s.frozen?
		 => true 
	
	52. getbyte(index) → integer or nil
		Returns the byte at zero-based index as an integer, or nil if index is out of range:

		3.2.2 :096 > s
		 => "hi" 
		3.2.2 :097 > s.getbyte(0)
		 => 104 

	53. gsub(pattern, replacement) → new_string [OR] gsub(pattern) {|match| ... } → new_string [OR] gsub(pattern) → enumerator
		Returns a copy of self with all occurrences of the given pattern replaced.

		3.2.2 :099 > s = 'Hello'
		 => "Hello" 
		3.2.2 :100 > s.gsub(/[aeiou]/, '*')
		 => "H*ll*"

	54. gsub!(pattern, replacement) → self or nil [OR] gsub!(pattern) {|match| ... } → self or nil [OR] gsub!(pattern) → an_enumerator
		Performs the specified substring replacement(s) on self; returns self if any replacement occurred, nil otherwise.

		3.2.2 :101 > s = 'Hello'
		 => "Hello" 
		3.2.2 :102 > s.gsub!(/[aeiou]/, '*')
		 => "H*ll*" 

	55. hash → integer
		Returns the integer hash value for self. The value is based on the length, content and encoding of self.
		
		3.2.2 :103 > s
		 => "H*ll*" 
		3.2.2 :104 > s.hash
		 => -3688621146140924568 

	56. hex → integer
		Interprets the leading substring of self as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number; 
		returns zero if there is no such leading substring:

		3.2.2 :109 > s = 'a'
		 => "a" 
		3.2.2 :110 > s.hex
		 => 10 

	57. include? other_string → true or false
		Returns true if self contains other_string, false otherwise:

		3.2.2 :117 > s = "Hello"
		 => "Hello" 
		3.2.2 :118 > s.include?('lo')
		 => true 

	58. index(substring, offset = 0) → integer or nil [OR] index(regexp, offset = 0) → integer or nil
		Returns the integer index of the first match for the given argument, or nil if none found; the search of self is forward, and begins at position offset (in characters).
		With string argument substring, returns the index of the first matching substring in self:

		3.2.2 :119 > s
		 => "Hello" 
		3.2.2 :120 > s.index('l')
		 => 2 
		3.2.2 :121 > s.index(/e./)
		 => 1 
		3.2.2 :122 > s.index(/.e/)
		 => 0 
		3.2.2 :123 > s.index('l', 4)
		 => nil 
		3.2.2 :124 > s.index('l', 2)
		 => 2 

	59. initialize_copy(other_string) -> self
		Replaces the contents of self with the contents of other_string:

		3.2.2 :126 > s
		 => "Hello" 
		3.2.2 :127 > s.replace('bar')
		 => "bar" 
		3.2.2 :128 > s
		 => "bar" 

	60. insert(index, other_string) → self
		Inserts the given other_string into self; returns self. If the Integer index is positive, inserts other_string at offset index:

		3.2.2 :128 > s
		 => "bar" 
		3.2.2 :129 > s.insert(1, 'ih')
		 => "bihar"

	61. inspect → string
		Returns a printable version of self, enclosed in double-quotes, and with special characters escaped:

		3.2.2 :130 > s
		 => "bihar" 
		3.2.2 :131 > s.inspect
		 => "\"bihar\"" 

	62. intern → symbol
		Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. Also aliased as: to_sym

		3.2.2 :133 > s.intern
		 => :bihar 
		3.2.2 :134 > s == :bihar
		 => false 
		3.2.2 :135 > s = 'cat'.to_sym
		 => :cat 
		3.2.2 :136 > s == :cat
		 => true 

	63. length → integer
		Returns the count of characters (not bytes) in self. Also aliased as: size

		3.2.2 :138 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :139 > s.length
		 => 11 

	64. lines(Line_sep = $/, chomp: false) → array_of_strings
		Forms substrings (“lines”) of self according to the given arguments; returns the lines in an array. String#each_line 

	65. ljust(size, pad_string = ' ') → new_string
		Returns a left-justified copy of self. If integer argument size is greater than the size (in characters) of self, 
		returns a new string of length size that is a copy of self, left justified and padded on the right with pad_string. 
		If size is not greater than the size of self, returns a copy of self.

		3.2.2 :143 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :144 > s.ljust(20)
		 => "Hello World         " 

	66. lstrip → new_string
		Returns a copy of self with leading whitespace removed; see Whitespace in Strings:

	67. lstrip! → self or nil
		Like String#lstrip, except that any modifications are made in self; returns self if any modification are made, nil otherwise.

	68. match(pattern, offset = 0) → matchdata or nil [OR] match(pattern, offset = 0) {|matchdata| ... } → object
		Returns a MatchData object (or nil) based on self and the given pattern.

		3.2.2 :151 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :152 > s.match('e')
		 => #<MatchData "e"> 

	69. match?(pattern, offset = 0) → true or false
		Returns true or false based on whether a match is found for self and pattern.

		3.2.2 :153 > s
		 => "Hello World" 
		3.2.2 :154 > s.match?('l')
		 => true 

	70. next()
		Returns the successor to self. The successor is calculated by incrementing characters. Alias for: succ

		3.2.2 :155 > s
 		=> "Hello World" 
		3.2.2 :156 > s.succ
		 => "Hello Worle" 

	71. next!()
		Equivalent to String#succ, but modifies self in place; returns self.
		String#next! is an alias for String#succ!.

	72. oct → integer
		Interprets the leading substring of self as a string of octal digits (with an optional sign) and returns the corresponding number; 
		returns zero if there is no such leading substring:

		3.2.2 :158 > '123'.oct
		 => 83

	73. ord → integer
		Returns the integer ordinal of the first character of self:

		3.2.2 :159 > s
		 => "Hello World" 
		3.2.2 :160 > s.ord
		 => 72 
		3.2.2 :161 > "H".ord
		 => 72 

	74. partition(string_or_regexp) → [head, match, tail]
		Returns a 3-element array of substrings of self. Matches a pattern against self, scanning from the beginning.

		3.2.2 :162 > s
		 => "Hello World" 
		3.2.2 :163 > s.partition('l')
		 => ["He", "l", "lo World"] 

	75. prepend(*other_strings) → string
		Prepends each string in other_strings to self and returns self:

		3.2.2 :164 > s
		 => "Hello World" 
		3.2.2 :165 > s.prepend('How', 'are', 'you?')
		 => "Howareyou?Hello World" 

	76. replace(other_string) → self
		Replaces the contents of self with the contents of other_string. Alias for: initialize_copy

		3.2.2 :166 > s
		 => "Howareyou?Hello World" 
		3.2.2 :167 > s.replace("Hello")
		 => "Hello" 

	77. reverse → string
		Returns a new string with the characters from self in reverse order.

		3.2.2 :168 > s
		 => "Hello" 
		3.2.2 :169 > s.reverse
		 => "olleH" 

	78. reverse! → self
		Returns self with its characters reversed:

		3.2.2 :170 > s
		 => "Hello" 
		3.2.2 :171 > s.reverse!
		 => "olleH" 
		3.2.2 :172 > s
		 => "olleH" 

	79. rindex(substring, offset = self.length) → integer or nil {OR} rindex(regexp, offset = self.length) → integer or nil
		Returns the Integer index of the last occurrence of the given substring, or nil if none found:

		3.2.2 :173 > s
		 => "olleH" 
		3.2.2 :174 > s.rindex('l')
		 => 2 

	80. rjust(size, pad_string = ' ') → new_string
		Returns a right-justified copy of self. If integer argument size is greater than the size (in characters) of self, 
		returns a new string of length size that is a copy of self, right justified and padded on the left with pad_string.
		If size is not greater than the size of self, returns a copy of self:

		3.2.2 :174 > s.rindex('l')
		 => 2 
		3.2.2 :175 > s.rjust(10)
		 => "     olleH" 

	81. rpartition(sep) → [head, match, tail]
		Returns a 3-element array of substrings of self. Matches a pattern against self, scanning backwards from the end. 

		3.2.2 :178 > s
		 => "Hello" 
		3.2.2 :179 > s.rpartition('l')
		 => ["Hel", "l", "o"] 

	82. rstrip → new_string
		Returns a copy of the receiver with trailing whitespace removed; 

		3.2.2 :180 > s = "Hello     "
		 => "Hello     " 
		3.2.2 :181 > s.rstrip
		 => "Hello" 

	83. rstrip! → self or nil
		Like String#rstrip, except that any modifications are made in self; returns self if any modification are made, nil otherwise.

	84.  scan(string_or_regexp) → array [OR] scan(string_or_regexp) {|matches| ... } → self 
		Matches a pattern against self; the pattern is:
		string_or_regexp itself, if it is a Regexp. Regexp.quote(string_or_regexp), if string_or_regexp is a string. 
		Iterates through self, generating a collection of matching results. If the pattern contains no groups, each result is the matched string, $&. 
		If the pattern contains groups, each result is an array containing one entry per group. With no block given, returns an array of the results.

		3.2.2 :185 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :186 > s.scan(/\w+/)
		 => ["Hello", "World"] 
		3.2.2 :187 > s.scan(/.../)
		 => ["Hel", "lo ", "Wor"] 

	85. scrub(replacement_string = default_replacement) → new_string [OR] scrub{|bytes| ... } → new_string
		Returns a copy of self with each invalid byte sequence replaced by the given replacement_string.
		With no block given and no argument, replaces each invalid sequence with the default replacement string ("�" for a Unicode encoding, '?' otherwise):

		3.2.2 :190 > s = "Hello\x81\x81Hi"
		 => "Hello\x81\x81Hi" 
		3.2.2 :191 > s.scrub
		 => "Hello��Hi" 
	
	86. scrub! → self [OR] scrub!(replacement_string = default_replacement) → self [OR] scrub!{|bytes| ... } → self
		Like String#scrub, except that any replacements are made in self.

	87. setbyte(index, integer) → integer
		Sets the byte at zero-based index to integer; returns integer.

		3.2.2 :195 > s
		 => "Hello World" 
		3.2.2 :196 > s.setbyte(0, 65)
		 => 65 
		3.2.2 :197 > s
		 => "Aello World" 

	88. size()
		Returns the count of characters (not bytes) in self. Alias for: length.

		3.2.2 :198 > s
		 => "Aello World" 
		3.2.2 :199 > s.size
		 => 11 

	89. slice(*args)
		Returns the substring of self specified by the arguments. Alias for: []

		
	90. slice!(index) → new_string or nil [OR] slice!(start, length) → new_string or nil [OR] slice!(range) → new_string or nil [OR] slice!(regexp, capture = 0) → new_string or nil 
	    [OR] slice!(substring) → new_string or nil
		Removes and returns the substring of self specified by the arguments. 

		3.2.2 :205 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :206 > s.slice!(2)
		 => "l" 
		3.2.2 :207 > s
		 => "Helo World" 
		3.2.2 :208 > s.slice!(3..6)
		 => "o Wo" 
		3.2.2 :209 > s
		 => "Helrld" 
	
	91. split(field_sep = $;, limit = nil) → array [OR] split(field_sep = $;, limit = nil) {|substring| ... } → self
		Returns an array of substrings of self that are the result of splitting self at each occurrence of the given field separator field_sep.

		3.2.2 :001 > s = "Hello World"
		 => "Hello World" 
		3.2.2 :002 > s.split()
		 => ["Hello", "World"] 
		3.2.2 :003 > s.split('l')
		 => ["He", "", "o Wor", "d"] 
		3.2.2 :004 > s.split(/l/)
		 => ["He", "", "o Wor", "d"] 

	92. squeeze(*selectors) → new_string
		Returns a copy of self with characters specified by selectors “squeezed”.
		“Squeezed” means that each multiple-character run of a selected character is squeezed down to a single character; with no arguments given, squeezes all characters:

		3.2.2 :005 > s
		 => "Hello World" 
		3.2.2 :006 > s.squeeze
		 => "Helo World" 

	93. squeeze!(*selectors) → self or nil
		Like String#squeeze, but modifies self in place. Returns self if any changes were made, nil otherwise.

		3.2.2 :008 > s
		 => "Hello World" 
		3.2.2 :009 > s.squeeze!
		 => "Helo World" 

	94. start_with?(*string_or_regexp) → true or false
		Returns whether self starts with any of the given string_or_regexp.
		
		3.2.2 :010 > s = "Hello World!"
		 => "Hello World!" 
		3.2.2 :011 > s.start_with?("he")
		 => false 
		3.2.2 :012 > s.start_with?("He")
		 => true 

	95. strip → new_string
		Returns a copy of the receiver with leading and trailing whitespace removed.
		
		3.2.2 :013 > s = "    Hello World!    "
		 => "    Hello World!    " 
		3.2.2 :014 > s.strip
		 => "Hello World!" 

	96. strip! → self or nil
		Like String#strip, except that any modifications are made in self; returns self if any modification are made, nil otherwise.

	97. sub(pattern, replacement) → new_string [OR] sub(pattern) {|match| ... } → new_string
		Returns a copy of self with only the first occurrence (not all occurrences) of the given pattern replaced.

		3.2.2 :017 > s
		 => "Hello World!" 
		3.2.2 :018 > s.sub(/ell/, 'al')
		 => "Halo World!" 
		3.2.2 :019 > s.sub(/[aeiou]/, '*')
		 => "H*llo World!" 

	98. sub!(pattern, replacement) → self or nil [OR] sub!(pattern) {|match| ... } → self or nil
		Returns self with only the first occurrence (not all occurrences) of the given pattern replaced.

	99. succ → new_str
		Returns the successor to self. The successor is calculated by incrementing characters. Also aliased as: next

		3.2.2 :020 > s
		 => "Hello World!" 
		3.2.2 :021 > s.succ
		 => "Hello Worle!" 
		3.2.2 :022 > "01".succ
		 => "02" 
		3.2.2 :023 > "az".succ
		 => "ba" 

	100. succ! → self
		Equivalent to String#succ, but modifies self in place; returns self.

	101. sum(n = 16) → integer
		Returns a basic n-bit checksum of the characters in self; the checksum is the sum of the binary value of each byte in self, modulo 2**n - 1.
		This is not a particularly strong checksum.

		3.2.2 :024 > s
		 => "Hello World!" 
		3.2.2 :025 > s.sum
		 => 1085 
		3.2.2 :026 > s.sum(4)
		 => 13 
		3.2.2 :027 > s.sum(16)
		 => 1085 
		3.2.2 :028 > s.sum(64)
		 => 1085

	102. swapcase(*options) → string
		Returns a string containing the characters in self, with cases reversed; each uppercase character is downcased; each lowercase character is upcased:

		3.2.2 :029 > s
		 => "Hello World!" 
		3.2.2 :030 > s.swapcase
		 => "hELLO wORLD!" 

	103. swapcase!(*options) → self or nil
		Upcases each lowercase character in self; downcases uppercase character; returns self if any changes were made, nil otherwise:

		3.2.2 :031 > s
		 => "Hello World!" 
		3.2.2 :032 > s.swapcase!
		 => "hELLO wORLD!" 

	104. to_c → complex
		Returns a complex which denotes the string form. The parser ignores leading whitespaces and trailing garbage. Any digit sequences can be separated by an underscore. 
		Returns zero for null or garbage string.

		3.2.2 :033 > s = '9'
		 => "9" 
		3.2.2 :034 > s.to_c
		 => (9+0i)
		3.2.2 :035 > s = '45i'
		 => "45i" 
		3.2.2 :036 > s.to_c
		 => (0+45i) 

	105. to_f → float
		Returns the result of interpreting leading characters in self as a Float. 

		3.2.2 :038 > s = "3.14159"
		 => "3.14159" 
		3.2.2 :039 > s.to_f
		 => 3.14159 

	106. to_i(base = 10) → integer
		Returns the result of interpreting leading characters in self as an integer in the given base

		3.2.2 :040 > s = "129273"
		 => "129273" 
		3.2.2 :041 > s.to_i
		 => 129273 
		3.2.2 :047 > s
		 => "129273" 
		3.2.2 :048 > s = "0123def"
		 => "0123def" 
		3.2.2 :049 > s.to_i
		 => 123 

	107. to_r → rational
		Returns the result of interpreting leading characters in str as a rational. Leading whitespace and extraneous characters past the end of a valid number are ignored. 
		Digit sequences can be separated by an underscore. If there is not a valid number at the start of str, zero is returned. This method never raises an exception.

		3.2.2 :051 > s = "  2  "
		 => "  2  " 
		3.2.2 :052 > s.to_r
		 => (2/1) 

	108. to_s → self or string
		Returns self if self is a String, or self converted to a String if self is a subclass of String.
		String#to_str is an alias for String#to_s.

		3.2.2 :053 > s = 123
		 => 123 
		3.2.2 :054 > s.to_s
		 => "123" 

	109. to_str()
		Returns self if self is a String, or self converted to a String if self is a subclass of String.
		String#to_str is an alias for String#to_s.
		Alias for: to_s

	110. to_sym → symbol
		Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. 

		3.2.2 :057 > s.to_sym
		 => :cat 
		3.2.2 :058 > s
		 => "cat" 
		3.2.2 :059 > s.intern
		 => :cat 

	111. tr(selector, replacements) → new_string
		Returns a copy of self with each character specified by string selector translated to the corresponding character in string replacements.

		3.2.2 :062 > s = "Hello"
		 => "Hello" 
		3.2.2 :063 > s.tr('el', 'ip')
		 => "Hippo" 
		3.2.2 :064 > s.tr('aeiou', '-')
		 => "H-ll-"  

	112. tr!(selector, replacements) → self or nil
		Like String#tr, but modifies self in place. Returns self if any changes were made, nil otherwise.

	113. tr_s(selector, replacements) → string
		Like String#tr, but also squeezes the modified portions of the translated string; returns a new string (translated and squeezed).
		
		3.2.2 :065 > s
		 => "Hello" 
		3.2.2 :066 > s.tr_s('l', 'r')
		 => "Hero" 

	114. tr_s!(selector, replacements) → self or nil
		Like String#tr_s, but modifies self in place. Returns self if any changes were made, nil otherwise.

	115. undump → string
		Returns an unescaped version of self.

		3.2.2 :075 > s_orig = "\f\x00\xff\\\""
		 => "\f\u0000\xFF\\\"" 
		3.2.2 :076 > s_dumped = s_orig.dump
		 => "\"\\f\\x00\\xFF\\\\\\\"\"" 
		3.2.2 :077 > s_undumped = s_dumped.undump
		 => "\f\u0000\xFF\\\"" 
		3.2.2 :078 > s_undumped == s_orig
		 => true 

	116. unicode_normalize(form = :nfc) → string
		Returns a copy of self with Unicode normalization applied.

		3.2.2 :079 > "a\u0300".unicode_normalize 
		 => "à" 
		3.2.2 :080 > "\u00E0".unicode_normalize(:nfd)
		 => "à" 

	117. unicode_normalize!(form = :nfc) → self
		Like String#unicode_normalize, except that the normalization is performed on self.

	118. unicode_normalized?(form = :nfc) → true or false
		Returns true if self is in the given form of Unicode normalization, false otherwise. The form must be one of :nfc, :nfd, :nfkc, or :nfkd.

		3.2.2 :081 > s = "a\u0300"
		 => "à" 
		3.2.2 :082 > s.unicode_normalized?
		 => false 
		3.2.2 :085 > s.unicode_normalize!
		 => "à" 
		3.2.2 :086 > s.unicode_normalized?
		 => true 

	119. unpack(template, offset: 0) → array
		Extracts data from self, forming objects that become the elements of a new array; returns that array. 

	120. unpack1(template, offset: 0) → object
		Like String#unpack, but unpacks and returns only the first extracted object.

	121. upcase(*options) → string
		Returns a string containing the upcased characters in self:

		3.2.2 :088 > s = "Hello"
		 => "Hello" 
		3.2.2 :089 > s.upcase
		 => "HELLO" 
	
	122. upcase!(*options) → self or nil
		Upcases the characters in self; returns self if any changes were made, nil otherwise:

		3.2.2 :090 > s
		 => "Hello" 
		3.2.2 :091 > s.upcase!
		 => "HELLO" 
		3.2.2 :092 > s
		 => "HELLO" 

	123. upto(other_string, exclusive = false) {|string| ... } → self [OR] upto(other_string, exclusive = false) → new_enumerator
		With a block given, calls the block with each String value returned by successive calls to String#succ; the first value is self, the next is self.succ, and so on; 
		the sequence terminates when value other_string is reached; returns self:

		3.2.2 :094 > s = "a8"
		 => "a8" 
		3.2.2 :095 > s.upto('b6') {|s| print s, " "}
		a8 a9 b0 b1 b2 b3 b4 b5 b6  => "a8" 
		3.2.2 :094 > s = "a8"
	 	 => "a8" 
		3.2.2 :095 > s.upto('b6') {|s| print s, " "}
		a8 a9 b0 b1 b2 b3 b4 b5 b6  => "a8" 
		3.2.2 :096 > s.upto('b6', true) {|s| print s, " "}
		a8 a9 b0 b1 b2 b3 b4 b5  => "a8" 
		3.2.2 :097 > '25'.upto('30') {|s| p s}
		"25"
		"26"                                                              
		"27"                                                              
		"28"                                                              
		"29"                                                              
		"30"   
		 => "25" 

	124. valid_encoding? → true or false
		Returns true if self is encoded correctly, false otherwise:

		3.2.2 :110 > "\xc2\xa1".force_encoding("UTF-8").valid_encoding?
		 => true 
		3.2.2 :111 > "\xc2".force_encoding("UTF-8").valid_encoding?
		 => false


5. Creating a Hash
	A Hash maps each of its unique keys to a specific value. A Hash has certain similarities to an Array, but: 
	An Array index is always an Integer. A Hash key can be (almost) any object.

	You can create a Hash object explicitly with: A hash literal. You can convert certain objects to Hashes with: Method Hash. You can create a Hash by calling method Hash.new.

	1. h = Hash.new
		Create an empty Hash:

		3.2.2 :001 > h = Hash.new
		 => {} 
		3.2.2 :002 > h.class
		 => Hash 

	2. h = Hash[]
		You can create a Hash by calling method Hash.[].

		3.2.2 :003 > h = Hash[]
		 => {} 
	
	3. h = Hash[key1: value1, key2: value2, key3: value3]
		Create a Hash with initial entries:

		3.2.2 :004 > h = Hash[foo: 0, bar: 1, baz: 2]
		 => {:foo=>0, :bar=>1, :baz=>2} 

	4. h = {}
		You can create a Hash by using its literal form (curly braces).

		3.2.2 :005 > h = {}
		 => {} 

	5. h = {key1: value1, key2: value2, key3: value3}
		Create a Hash with initial entries:
		
		3.2.2 :006 > h = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		
6. Following are the public hash methods (assuming hash is an array object):

	1. hash < other_hash → true or false
		Returns true if hash is a proper subset of other_hash, false otherwise:

		3.2.2 :001 > h1 = {foo: 0, bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.2 :002 > h2 = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :003 > h1 < h2
		 => true 
		3.2.2 :004 > h2 < h1
		 => false 
		3.2.2 :005 > h1 < h1
		 => false 

	2. hash <= other_hash → true or false
		Returns true if hash is a subset of other_hash, false otherwise:

		3.2.2 :001 > h1 = {foo: 0, bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.2 :002 > h2 = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :006 > h1 <= h2
		 => true 
		3.2.2 :007 > h2 <= h1
		 => false 
		3.2.2 :008 > h1 <= h1
		 => true 

	3. hash == object → true or false
		Returns true if all of the following are true: object is a Hash object. hash and object have the same keys (regardless of order).
		For each key key, hash[key] == object[key]. Otherwise, returns false.
		
		3.2.2 :001 > h1 = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :002 > h2 = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :003 > h3 = {baz: 2, bar: 1, foo: 0}
		 => {:baz=>2, :bar=>1, :foo=>0} 
		3.2.2 :004 > h1 == h2
		 => true 
		3.2.2 :005 > h1 == h3
		 => true 

	4. hash > other_hash → true or false	
		Returns true if hash is a proper superset of other_hash, false otherwise:

		3.2.2 :009 > h1
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :010 > h2 = {foo: 0, bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.2 :011 > h1 >h2
		 => true 
		3.2.2 :012 > h2 > h1
		 => false 
		3.2.2 :013 > h1 > h1
		 => false

	5. hash >= other_hash → true or false
		Returns true if hash is a superset of other_hash, false otherwise:

		3.2.2 :009 > h1
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :010 > h2 = {foo: 0, bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.2 :014 > h1 >= h2
		 => true 
		3.2.2 :015 > h2 >= h1
		 => false 
		3.2.2 :016 > h1 >= h1
		 => true 

	6. hash[key] → value
		Returns the value associated with the given key, if found. If key is not found, returns a default value.

		3.2.2 :020 > h1
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :021 > h1[:foo]
		 => 0 
		3.2.2 :022 > h1[:nosuch]
		 => nil 

	7. hash[key] = value → value
		Associates the given value with the given key; returns value. If the given key exists, replaces its value with the given value; the ordering is not affected 
		If key does not exist, adds the key and value; the new entry is last in the order
		Hash#store is an alias for Hash#[]=. 

		3.2.2 :025 > h1
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :026 > h1[:foo] = 3
		 => 3 
		3.2.2 :027 > h1.store(:bar, 6)
		 => 6  		
		3.2.2 :029 > h1		
		 => {:foo=>3, :bar=>6, :baz=>2} 

		3.2.2 :030 > h = {foo: 0, bar: 1}
		 => {:foo=>0, :bar=>1} 
		3.2.2 :031 > h[:baz] = 2
		 => 2 
		3.2.2 :032 > h.store(:bat, 3)
		 => 3 
		3.2.2 :033 > h
		 => {:foo=>0, :bar=>1, :baz=>2, :bat=>3} 

	8. any? → true or false [OR] any?(object) → true or false [OR] any? {|key, value| ... } → true or false
		Returns true if any element satisfies a given criterion; false otherwise. With no argument and no block, returns true if self is non-empty; false if empty.

		With argument object and no block, returns true if for any key key h.assoc(key) == object:

		3.2.2 :034 > h
		 => {:foo=>0, :bar=>1, :baz=>2, :bat=>3} 
		3.2.2 :035 > h.any?([:bar, 1])
		 => true 
		3.2.2 :036 > h.any?([:bar, 0])
		 => false 
	
		With no argument and a block, calls the block with each key-value pair; returns true if the block returns any truthy value, false otherwise:

		3.2.2 :037 > h = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :038 > h.any? {|key, value| value < 3}
		 => true 
		3.2.2 :039 > h.any? {|key, value| value > 3}
		 => false 

	9. assoc(key) → new_array or nil
		If the given key is found, returns a 2-element Array containing that key and its value:

		3.2.2 :040 > h = {foo: 0, bar: 1, baz: 2}
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :041 > h.assoc(:bar)
		 => [:bar, 1] 

		Returns nil if key key is not found.

	10. clear → self
		Removes all hash entries; returns self.

		3.2.2 :042 > h
		 => {:foo=>0, :bar=>1, :baz=>2} 
		3.2.2 :043 > h.clear
		 => {} 
		3.2.2 :044 > h
		 => {} 

	11. compact → new_hash
		Returns a copy of self with all nil-valued entries removed:

		3.2.2 :048 > h1
		 => {:foo=>3, :bar=>6, :baz=>2} 
		3.2.2 :049 > h1[:bat] = nil
		 => nil 
		3.2.2 :050 > h1
		 => {:foo=>3, :bar=>6, :baz=>2, :bat=>nil} 
		3.2.2 :051 > h1.compact
		 => {:foo=>3, :bar=>6, :baz=>2} 
