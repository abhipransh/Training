1. SQL: Structured Query Language, used to access and manipulate data.

2. SQL used CRUD operations to communicate with DB.
	CREATE - execute INSERT statements to insert new tuple into the relation.
	READ - Read data already in the relations.
	UPDATE - Modify already inserted data in the relation.
	DELETE - Delete specific data point/tuple/row or multiple rows.
	
3. SQL is not DB, is a query language.

4. What is RDBMS? (Relational Database Management System)
	Software that enable us to implement designed relational model.
	e.g., MySQL, MS SQL, Oracle, IBM etc.
	Table/Relation is the simplest form of data storage object in R-DB.
	MySQL is open-source RDBMS, and it uses SQL for all CRUD operations

5. Data Types:

	1. Numeric Types:	
		Name 			Storage Size 	Description 				Range
		smallint 		2 bytes 	small-range integer 			-32768 to +32767
		integer 		4 bytes 	typical choice for integer 		-2147483648 to +2147483647
		bigint 			8 bytes 	large-range integer 			-9223372036854775808 to 9223372036854775807
		decimal 		variable 	user-specified precision,exact 		up to 131072 digits before the decimal point; up to 16383 digits after the decimal point
		numeric 		variable 	user-specified precision,exact 		up to 131072 digits before the decimal point; up to 16383 digits after the decimal point
		real 			4 bytes 	variable-precision,inexact 		6 decimal digits precision
		double precision 	8 bytes 	variable-precision,inexact 		15 decimal digits precision
		smallserial 		2 bytes 	small autoincrementing integer 		1 to 32767
		serial 			4 bytes 	autoincrementing integer 		1 to 2147483647
		bigserial 		8 bytes 	large autoincrementing integer 		1 to 9223372036854775807
	
	2. Monetary Types
		Name 	Storage Size 	Description 		Range
		money 	8 bytes 	currency amount 	-92233720368547758.08 to +92233720368547758.07

	3. Character Types
		1. character varying(n), varchar(n) 
		   variable-length with limit
		2. character(n), char(n)
		   fixed-length, blank padded
		3. text
		   variable unlimited length

	4. Date/Time Types
		Name 					Storage Size 	Description 				Low Value 		High Value
		timestamp [(p)] [without time zone ] 	8 bytes 	both date and time (no time zone) 	4713 BC 		294276 AD
		TIMESTAMPTZ 				8 bytes 	both date and time, with time zone 	4713 BC 		294276 AD
		date 					4 bytes 	date (no time of day) 	4713 BC 	5874897 AD
		time [ (p)] [ without time zone ] 	8 bytes 	time of day (no date) 	00:00:00 	24:00:00
		time [ (p)] with time zone 		12 bytes 	times of day only, with time zone 	00:00:00+1459 		24:00:00-1459
		interval [fields ] [(p) ] 		12 bytes 	time interval 	-178000000 years 	178000000 years	

	5. Boolean	
		boolean	1 byte	- State true or False.

6. SELECT statement

	SELECT select_list FROM table_name;
	
	1) Using PostgreSQL SELECT statement to query data from one column example
		
		SELECT reader_fname FROM reader;
		
	2) Using PostgreSQL SELECT statement to query data from multiple columns example
	
		SELECT reader_fname, reader_lname FROM ;
		
    	3) Using PostgreSQL SELECT statement to query data from all columns of a table example
    	
    		SELECT * FROM reader;
    		
    	4) Using PostgreSQL SELECT statement with expressions example
    	
    		SELECT reader_fname || ' ' || reader_lname FROM reader;
    		
    	5) Using PostgreSQL SELECT statement with expressions example
    	
    		SELECT 5 * 3;
    		
 7. Column Aliases
 
 	SELECT column_name AS alias_name FROM table_name;
 	SELECT column_name alias_name FROM table_name;
 	SELECT expression AS alias_name FROM table_name;
 	
 	1) Assigning a column alias to a column example
 		
 		SELECT reader_fname, reader_lname AS surname FROM reader;
 		SELECT reader_fname, reader_lname surname FROM reader;
 		
 	2) Assigning a column alias to an expression example
 	
 		SELECT reader_fname || ' ' || reader_lname AS full_name FROM reader;
 		
 	3) Column aliases that contain spaces
 	
 		SELECT reader_fname || ' ' || reader_lname "full name" FROM reader;
 		
8. ORDER BY clause

	ORDER BY sorts in ascending order by default	
	
	SELECT select_list FROM table_name ORDER BY sort_expression1 [ASC | DESC], ... sort_expressionN [ASC | DESC];
	
	1) Using PostgreSQL ORDER BY clause to sort rows by one column
	
		SELECT reader_fname, reader_lname FROM reader ORDER BY reader_fname ASC;
		
	2) Using PostgreSQL ORDER BY clause to sort rows by one column in descending order
	
		SELECT reader_fname, reader_lname FROM reader ORDER BY reader_lname DESC;	
		
	3) Using PostgreSQL ORDER BY clause to sort rows by multiple columns
	
		SELECT reader_fname, reader_lname FROM reader ORDER BY reader_fname ASC, reader_lname DESC;
		
	4) Using PostgreSQL ORDER BY clause to sort rows by expressions
	
		SELECT reader_fname, LENGTH(reader_fname) len FROM reader ORDER BY len DESC;
			
	5) Using NULLS FIRST and NULLS LAST
	
		SELECT reader_fname, LENGTH(reader_fname) len FROM reader ORDER BY len DESC NULLS FIRST;
		
		SELECT reader_fname, LENGTH(reader_fname) len FROM reader ORDER BY len DESC NULLS LAST;
	
9. SELECT DISTINCT

	The DISTINCT clause is used in the SELECT statement to remove duplicate rows from a result set. 
	
	SELECT DISTINCT column1, column2 FROM table_name;
		
	SELECT DISTINCT ON (column1) column_alias, column2 FROM table_name ORDER BY column1, column2;
	
	1) Using DISTINCT with multiple columns
	
		SELECT DISTINCT emp_fname, emp_lname FROM employee ORDER BY emp_fname, emp_lname;
		
	2) Using DISTINCT ON to set distinct for a particular column
	
		SELECT DISTINCT ON(emp_fname) f_name, emp_lname FROM employee;
		
10. WHERE Clause

	SELECT select_list FROM table_name WHERE condition ORDER BY sort_expression;
	
	1) Using WHERE clause with the equal (=) operator 
		
		SELECT author_fname, author_lname FROM author WHERE author_fname = 'F.Scott';
		
	2) Using WHERE clause with the AND operator
	
		SELECT author_fname, author_lname FROM author WHERE author_fname = 'James' AND author_lname = 'Joyce';
		
	3) Using the WHERE clause with the OR operator
	
		SELECT author_fname, author_lname FROM author WHERE author_lname = 'Fitzgerald' OR author_fname = 'James';

	4) Using WHERE clause with the IN operator		
		
		SELECT reader_fname, reader_lname FROM reader WHERE reader_fname IN ('F.Scott','James','Josie');

	5) Using the WHERE clause with the LIKE 
	
		SELECT author_fname, author_lname FROM author WHERE author_fname LIKE 'Jam%';
		
	6) Using the WHERE clause with the BETWEEN operator 
	
		SELECT author_fname, LENGTH(author_fname) name_length FROM author WHERE author_fname LIKE 'A%' AND LENGTH(author_fname) BETWEEN 3 AND 5 ORDER BY name_length;

	7) Using the WHERE clause with the not equal operator (<>) 
	
		SELECT author_fname, author_lname FROM author WHERE author_fname LIKE 'J%' AND author_lname <> 'Jo%';
		
11. LIMIT Clause

	LIMIT is an optional clause of the SELECT statement that constrains the number of rows returned by the query.
	
	SELECT select_list FROM table_name ORDER BY sort_expression LIMIT row_count;
	
	SELECT select_list FROM table_name LIMIT row_count OFFSET row_to_skip;	
	
	1) Using PostgreSQL LIMIT to constrain the number of returned rows 
	
		SELECT film_id, title, release_year FROM film ORDER BY film_id LIMIT 5;
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
